-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_array_array_ap_fixed_2u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_data_V_empty_n : IN STD_LOGIC;
    data_V_data_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC );
end;


architecture behav of conv_2d_cl_array_array_ap_fixed_2u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv26_3FFFEB0 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010110000";
    constant ap_const_lv23_7FFFCC : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111001100";
    constant ap_const_lv26_3FFFE21 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111000100001";
    constant ap_const_lv26_191 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110010001";
    constant ap_const_lv25_D6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000011010110";
    constant ap_const_lv26_167 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000101100111";
    constant ap_const_lv25_1FFFF5E : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111101011110";
    constant ap_const_lv26_178 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000101111000";
    constant ap_const_lv23_7FFFCA : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111001010";
    constant ap_const_lv26_3FFFE95 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010010101";
    constant ap_const_lv23_26 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100110";
    constant ap_const_lv26_1C5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000111000101";
    constant ap_const_lv25_A5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010100101";
    constant ap_const_lv26_3FFFED4 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111011010100";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_373 : STD_LOGIC_VECTOR (13 downto 0) := "00001101110011";
    constant ap_const_lv13_1B91 : STD_LOGIC_VECTOR (12 downto 0) := "1101110010001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal kernel_data_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal kernel_data_V_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln78_reg_2399 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal and_ln272_2_reg_2471 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_234 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_data_V_1_loc_1_reg_245 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_2_loc_1_reg_255 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_4_loc_1_reg_265 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_5_loc_1_reg_275 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_7_loc_1_reg_285 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_8_loc_1_reg_295 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln78_fu_1512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal io_acc_block_signal_op209 : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln78_reg_2399_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln78_fu_1518_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal kernel_data_V_6_ret_reg_2408 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_3_ret_reg_2415 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_0_ret_reg_2422 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_1_ret_reg_2429 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_2_ret_reg_2436 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_4_ret_reg_2442 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_5_ret_reg_2449 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_7_ret_reg_2456 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_data_V_8_ret_reg_2464 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln272_2_fu_1664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_out_0_V_fu_2107_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_out_0_V_reg_2475 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_1_V_fu_2177_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_1_V_reg_2480 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln293_fu_2186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_2485 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_start : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_done : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_idle : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_ready : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call11 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1_ignore_call11 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2_ignore_call11 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3_ignore_call11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp41 : BOOLEAN;
    signal ap_phi_mux_kernel_data_V_1_loc_1_phi_fu_248_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_kernel_data_V_2_loc_1_phi_fu_258_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_kernel_data_V_4_loc_1_phi_fu_268_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_kernel_data_V_5_loc_1_phi_fu_278_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_kernel_data_V_7_loc_1_phi_fu_288_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_kernel_data_V_8_loc_1_phi_fu_298_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_start_reg : STD_LOGIC := '0';
    signal select_ln308_fu_2213_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln301_fu_2261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln297_fu_2252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln306_fu_2195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_loc_1_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal sX_loc_1_fu_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal pY_loc_1_fu_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal sY_loc_1_fu_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln303_fu_2279_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln1118_969_fu_305_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_962_fu_306_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_964_fu_307_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_967_fu_308_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_963_fu_310_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_961_fu_311_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_868_fu_1758_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_968_fu_312_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_313_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_966_fu_314_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_960_fu_317_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_959_fu_319_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_965_fu_320_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_970_fu_321_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_958_fu_322_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_1620_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_40_fu_1636_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln272_fu_1608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln272_1_fu_1614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln272_2_fu_1630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln272_3_fu_1646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln272_1_fu_1658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln272_fu_1652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_fu_313_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln_fu_1684_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1118_s_fu_1695_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_863_fu_1702_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_862_fu_1691_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1118_fu_1706_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln708_s_fu_1712_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_958_fu_322_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_959_fu_319_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln708_1270_fu_1744_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_960_fu_317_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_961_fu_311_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln1118_369_fu_1787_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1118_370_fu_1798_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1118_870_fu_1794_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_871_fu_1805_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1118_fu_1809_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_1271_fu_1815_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_962_fu_306_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln708_1272_fu_1829_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_963_fu_310_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_1273_fu_1851_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1118_964_fu_307_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_965_fu_320_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_966_fu_314_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln708_1274_fu_1893_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1118_371_fu_1911_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1118_372_fu_1922_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_881_fu_1929_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1118_880_fu_1918_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1118_72_fu_1933_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln708_1275_fu_1939_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_967_fu_308_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_968_fu_312_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_1276_fu_1967_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1118_373_fu_1981_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1118_374_fu_1992_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_885_fu_1999_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_884_fu_1988_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln1118_279_fu_2003_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_969_fu_305_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_970_fu_321_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_1277_fu_2037_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_1247_fu_1734_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_1674_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1261_fu_2027_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1255_fu_1883_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1249_fu_1763_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1286_fu_2057_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_fu_2051_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1287_fu_2063_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_438_fu_1977_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_fu_1861_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_882_fu_1949_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln703_1290_fu_2081_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_872_fu_1825_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln703_fu_2087_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_1291_fu_2091_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_1289_fu_2075_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_573_fu_2097_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1288_fu_2069_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1292_fu_2101_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1254_fu_1865_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1250_fu_1773_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_439_fu_2047_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1260_fu_2009_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_1258_fu_1953_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1295_fu_2119_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1294_fu_2113_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1296_fu_2125_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_873_fu_1839_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_867_fu_1754_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln703_1298_fu_2137_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_864_fu_1722_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_1299_fu_2147_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln1118_878_fu_1903_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_575_fu_2153_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln703_1300_fu_2157_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_574_fu_2143_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln703_576_fu_2163_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_1301_fu_2167_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_1297_fu_2131_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_577_fu_2173_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln308_fu_2207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln303_fu_2273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_249 : BOOLEAN;

    component shift_line_buffer_array_ap_fixed_1u_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_elem_data_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        kernel_window_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430 : component shift_line_buffer_array_ap_fixed_1u_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_start,
        ap_done => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_done,
        ap_idle => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_idle,
        ap_ready => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_ready,
        in_elem_data_V_read => data_V_data_V_dout,
        kernel_window_1_V_read => ap_phi_mux_kernel_data_V_1_loc_1_phi_fu_248_p4,
        kernel_window_2_V_read => ap_phi_mux_kernel_data_V_2_loc_1_phi_fu_258_p4,
        kernel_window_4_V_read => ap_phi_mux_kernel_data_V_4_loc_1_phi_fu_268_p4,
        kernel_window_5_V_read => ap_phi_mux_kernel_data_V_5_loc_1_phi_fu_278_p4,
        kernel_window_7_V_read => ap_phi_mux_kernel_data_V_7_loc_1_phi_fu_288_p4,
        kernel_window_8_V_read => ap_phi_mux_kernel_data_V_8_loc_1_phi_fu_298_p4,
        ap_return_0 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_0,
        ap_return_1 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_1,
        ap_return_2 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_2,
        ap_return_3 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_3,
        ap_return_4 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_4,
        ap_return_5 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_5,
        ap_return_6 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_6,
        ap_return_7 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_7,
        ap_return_8 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_8,
        ap_ce => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln78_fu_1512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_start_reg <= ap_const_logic_1;
                elsif ((call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_ready = ap_const_logic_1)) then 
                    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_1512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_234 <= add_ln78_fu_1518_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_234 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    kernel_data_V_1_loc_1_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kernel_data_V_1_loc_1_reg_245 <= kernel_data_V_1_ret_reg_2429;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                kernel_data_V_1_loc_1_reg_245 <= kernel_data_V_1;
            end if; 
        end if;
    end process;

    kernel_data_V_2_loc_1_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kernel_data_V_2_loc_1_reg_255 <= kernel_data_V_2_ret_reg_2436;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                kernel_data_V_2_loc_1_reg_255 <= kernel_data_V_2;
            end if; 
        end if;
    end process;

    kernel_data_V_4_loc_1_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kernel_data_V_4_loc_1_reg_265 <= kernel_data_V_4_ret_reg_2442;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                kernel_data_V_4_loc_1_reg_265 <= kernel_data_V_4;
            end if; 
        end if;
    end process;

    kernel_data_V_5_loc_1_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kernel_data_V_5_loc_1_reg_275 <= kernel_data_V_5_ret_reg_2449;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                kernel_data_V_5_loc_1_reg_275 <= kernel_data_V_5;
            end if; 
        end if;
    end process;

    kernel_data_V_7_loc_1_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kernel_data_V_7_loc_1_reg_285 <= kernel_data_V_7_ret_reg_2456;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                kernel_data_V_7_loc_1_reg_285 <= kernel_data_V_7;
            end if; 
        end if;
    end process;

    kernel_data_V_8_loc_1_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kernel_data_V_8_loc_1_reg_295 <= kernel_data_V_8_ret_reg_2464;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                kernel_data_V_8_loc_1_reg_295 <= kernel_data_V_8;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((icmp_ln293_fu_2186_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln293_fu_2186_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln306_fu_2195_p2;
                end if;
            end if; 
        end if;
    end process;

    pX_loc_1_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_2186_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                pX_loc_1_fu_202 <= ap_const_lv32_0;
            elsif (((icmp_ln293_fu_2186_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                pX_loc_1_fu_202 <= add_ln306_fu_2195_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pX_loc_1_fu_202 <= pX;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_249)) then
                if ((icmp_ln297_fu_2252_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln297_fu_2252_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln301_fu_2261_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_loc_1_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln297_fu_2252_p2 = ap_const_lv1_1) and (icmp_ln293_fu_2186_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                pY_loc_1_fu_210 <= ap_const_lv32_0;
            elsif (((icmp_ln293_fu_2186_p2 = ap_const_lv1_1) and (icmp_ln297_fu_2252_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                pY_loc_1_fu_210 <= add_ln301_fu_2261_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pY_loc_1_fu_210 <= pY;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((icmp_ln293_fu_2186_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln293_fu_2186_p2 = ap_const_lv1_0)) then 
                    sX <= select_ln308_fu_2213_p3;
                end if;
            end if; 
        end if;
    end process;

    sX_loc_1_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_2186_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sX_loc_1_fu_206 <= ap_const_lv32_0;
            elsif (((icmp_ln293_fu_2186_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sX_loc_1_fu_206 <= select_ln308_fu_2213_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sX_loc_1_fu_206 <= sX;
            end if; 
        end if;
    end process;

    sY_loc_1_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln297_fu_2252_p2 = ap_const_lv1_1) and (icmp_ln293_fu_2186_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sY_loc_1_fu_214 <= ap_const_lv32_0;
            elsif (((icmp_ln293_fu_2186_p2 = ap_const_lv1_1) and (icmp_ln297_fu_2252_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sY_loc_1_fu_214 <= select_ln303_fu_2279_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sY_loc_1_fu_214 <= sY;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln272_2_fu_1664_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                acc_1_V_reg_2480 <= acc_1_V_fu_2177_p2;
                res_out_0_V_reg_2475 <= res_out_0_V_fu_2107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln272_2_reg_2471 <= and_ln272_2_fu_1664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln293_reg_2485 <= icmp_ln293_fu_2186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln78_reg_2399 <= icmp_ln78_fu_1512_p2;
                icmp_ln78_reg_2399_pp0_iter1_reg <= icmp_ln78_reg_2399;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_2399 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_data_V_0_ret_reg_2422 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_0;
                kernel_data_V_3_ret_reg_2415 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_1;
                kernel_data_V_6_ret_reg_2408 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_2399 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_data_V_1 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_3;
                kernel_data_V_1_ret_reg_2429 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_3;
                kernel_data_V_2 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_4;
                kernel_data_V_2_ret_reg_2436 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_4;
                kernel_data_V_4 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_5;
                kernel_data_V_4_ret_reg_2442 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_5;
                kernel_data_V_5 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_6;
                kernel_data_V_5_ret_reg_2449 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_6;
                kernel_data_V_7 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_7;
                kernel_data_V_7_ret_reg_2456 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_7;
                kernel_data_V_8 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_8;
                kernel_data_V_8_ret_reg_2464 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_return_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_reg_2485 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sY <= sY_loc_1_fu_214;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln78_fu_1512_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln78_fu_1512_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln78_fu_1512_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    acc_1_V_fu_2177_p2 <= std_logic_vector(unsigned(add_ln703_1297_fu_2131_p2) + unsigned(sext_ln703_577_fu_2173_p1));
    add_ln1118_72_fu_1933_p2 <= std_logic_vector(signed(sext_ln1118_881_fu_1929_p1) + signed(sext_ln1118_880_fu_1918_p1));
    add_ln1118_fu_1706_p2 <= std_logic_vector(signed(sext_ln1118_863_fu_1702_p1) + signed(sext_ln1118_862_fu_1691_p1));
    add_ln301_fu_2261_p2 <= std_logic_vector(unsigned(pY_loc_1_fu_210) + unsigned(ap_const_lv32_1));
    add_ln303_fu_2273_p2 <= std_logic_vector(unsigned(sY_loc_1_fu_214) + unsigned(ap_const_lv32_1));
    add_ln306_fu_2195_p2 <= std_logic_vector(unsigned(pX_loc_1_fu_202) + unsigned(ap_const_lv32_1));
    add_ln308_fu_2207_p2 <= std_logic_vector(unsigned(sX_loc_1_fu_206) + unsigned(ap_const_lv32_1));
    add_ln703_1286_fu_2057_p2 <= std_logic_vector(unsigned(trunc_ln708_1261_fu_2027_p4) + unsigned(trunc_ln708_1255_fu_1883_p4));
    add_ln703_1287_fu_2063_p2 <= std_logic_vector(unsigned(trunc_ln708_1249_fu_1763_p4) + unsigned(add_ln703_1286_fu_2057_p2));
    add_ln703_1288_fu_2069_p2 <= std_logic_vector(unsigned(add_ln703_fu_2051_p2) + unsigned(add_ln703_1287_fu_2063_p2));
    add_ln703_1289_fu_2075_p2 <= std_logic_vector(signed(sext_ln708_438_fu_1977_p1) + signed(sext_ln708_fu_1861_p1));
    add_ln703_1290_fu_2081_p2 <= std_logic_vector(signed(sext_ln1118_882_fu_1949_p1) + signed(ap_const_lv14_373));
    add_ln703_1291_fu_2091_p2 <= std_logic_vector(signed(sext_ln1118_872_fu_1825_p1) + signed(sext_ln703_fu_2087_p1));
    add_ln703_1292_fu_2101_p2 <= std_logic_vector(unsigned(add_ln703_1289_fu_2075_p2) + unsigned(sext_ln703_573_fu_2097_p1));
    add_ln703_1294_fu_2113_p2 <= std_logic_vector(unsigned(trunc_ln708_1254_fu_1865_p4) + unsigned(trunc_ln708_1250_fu_1773_p4));
    add_ln703_1295_fu_2119_p2 <= std_logic_vector(signed(sext_ln708_439_fu_2047_p1) + signed(trunc_ln708_1260_fu_2009_p4));
    add_ln703_1296_fu_2125_p2 <= std_logic_vector(unsigned(trunc_ln708_1258_fu_1953_p4) + unsigned(add_ln703_1295_fu_2119_p2));
    add_ln703_1297_fu_2131_p2 <= std_logic_vector(unsigned(add_ln703_1294_fu_2113_p2) + unsigned(add_ln703_1296_fu_2125_p2));
    add_ln703_1298_fu_2137_p2 <= std_logic_vector(signed(sext_ln1118_873_fu_1839_p1) + signed(sext_ln1118_867_fu_1754_p1));
    add_ln703_1299_fu_2147_p2 <= std_logic_vector(signed(sext_ln1118_864_fu_1722_p1) + signed(ap_const_lv13_1B91));
    add_ln703_1300_fu_2157_p2 <= std_logic_vector(signed(sext_ln1118_878_fu_1903_p1) + signed(sext_ln703_575_fu_2153_p1));
    add_ln703_1301_fu_2167_p2 <= std_logic_vector(signed(sext_ln703_574_fu_2143_p1) + signed(sext_ln703_576_fu_2163_p1));
    add_ln703_fu_2051_p2 <= std_logic_vector(unsigned(trunc_ln708_1247_fu_1734_p4) + unsigned(trunc_ln_fu_1674_p4));
    add_ln78_fu_1518_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_234) + unsigned(ap_const_lv7_1));
    and_ln272_1_fu_1658_p2 <= (icmp_ln272_3_fu_1646_p2 and icmp_ln272_2_fu_1630_p2);
    and_ln272_2_fu_1664_p2 <= (and_ln272_fu_1652_p2 and and_ln272_1_fu_1658_p2);
    and_ln272_fu_1652_p2 <= (icmp_ln272_fu_1608_p2 and icmp_ln272_1_fu_1614_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(data_V_data_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln78_reg_2399, ap_enable_reg_pp0_iter3, and_ln272_2_reg_2471, io_acc_block_signal_op209)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_lv1_1 = and_ln272_2_reg_2471) and (io_acc_block_signal_op209 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln78_reg_2399 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(data_V_data_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln78_reg_2399, ap_enable_reg_pp0_iter3, and_ln272_2_reg_2471, io_acc_block_signal_op209)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = and_ln272_2_reg_2471) and (io_acc_block_signal_op209 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln78_reg_2399 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp41_assign_proc : process(data_V_data_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln78_reg_2399, ap_enable_reg_pp0_iter3, and_ln272_2_reg_2471, io_acc_block_signal_op209)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp41 <= (((ap_const_lv1_1 = and_ln272_2_reg_2471) and (io_acc_block_signal_op209 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln78_reg_2399 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data_V_data_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln78_reg_2399, ap_enable_reg_pp0_iter3, and_ln272_2_reg_2471, io_acc_block_signal_op209)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = and_ln272_2_reg_2471) and (io_acc_block_signal_op209 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln78_reg_2399 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(data_V_data_V_empty_n, icmp_ln78_reg_2399)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln78_reg_2399 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_ignore_call11_assign_proc : process(data_V_data_V_empty_n, icmp_ln78_reg_2399)
    begin
                ap_block_state3_pp0_stage0_iter1_ignore_call11 <= ((icmp_ln78_reg_2399 = ap_const_lv1_0) and (data_V_data_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2_ignore_call11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(and_ln272_2_reg_2471, io_acc_block_signal_op209)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((ap_const_lv1_1 = and_ln272_2_reg_2471) and (io_acc_block_signal_op209 = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter3_ignore_call11_assign_proc : process(and_ln272_2_reg_2471, io_acc_block_signal_op209)
    begin
                ap_block_state5_pp0_stage0_iter3_ignore_call11 <= ((ap_const_lv1_1 = and_ln272_2_reg_2471) and (io_acc_block_signal_op209 = ap_const_logic_0));
    end process;


    ap_condition_249_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln293_fu_2186_p2, ap_enable_reg_pp0_iter2)
    begin
                ap_condition_249 <= ((icmp_ln293_fu_2186_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln78_fu_1512_p2)
    begin
        if ((icmp_ln78_fu_1512_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_kernel_data_V_1_loc_1_phi_fu_248_p4_assign_proc : process(ap_block_pp0_stage0, kernel_data_V_1_loc_1_reg_245, icmp_ln78_reg_2399_pp0_iter1_reg, kernel_data_V_1_ret_reg_2429, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_kernel_data_V_1_loc_1_phi_fu_248_p4 <= kernel_data_V_1_ret_reg_2429;
        else 
            ap_phi_mux_kernel_data_V_1_loc_1_phi_fu_248_p4 <= kernel_data_V_1_loc_1_reg_245;
        end if; 
    end process;


    ap_phi_mux_kernel_data_V_2_loc_1_phi_fu_258_p4_assign_proc : process(ap_block_pp0_stage0, kernel_data_V_2_loc_1_reg_255, icmp_ln78_reg_2399_pp0_iter1_reg, kernel_data_V_2_ret_reg_2436, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_kernel_data_V_2_loc_1_phi_fu_258_p4 <= kernel_data_V_2_ret_reg_2436;
        else 
            ap_phi_mux_kernel_data_V_2_loc_1_phi_fu_258_p4 <= kernel_data_V_2_loc_1_reg_255;
        end if; 
    end process;


    ap_phi_mux_kernel_data_V_4_loc_1_phi_fu_268_p4_assign_proc : process(ap_block_pp0_stage0, kernel_data_V_4_loc_1_reg_265, icmp_ln78_reg_2399_pp0_iter1_reg, kernel_data_V_4_ret_reg_2442, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_kernel_data_V_4_loc_1_phi_fu_268_p4 <= kernel_data_V_4_ret_reg_2442;
        else 
            ap_phi_mux_kernel_data_V_4_loc_1_phi_fu_268_p4 <= kernel_data_V_4_loc_1_reg_265;
        end if; 
    end process;


    ap_phi_mux_kernel_data_V_5_loc_1_phi_fu_278_p4_assign_proc : process(ap_block_pp0_stage0, kernel_data_V_5_loc_1_reg_275, icmp_ln78_reg_2399_pp0_iter1_reg, kernel_data_V_5_ret_reg_2449, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_kernel_data_V_5_loc_1_phi_fu_278_p4 <= kernel_data_V_5_ret_reg_2449;
        else 
            ap_phi_mux_kernel_data_V_5_loc_1_phi_fu_278_p4 <= kernel_data_V_5_loc_1_reg_275;
        end if; 
    end process;


    ap_phi_mux_kernel_data_V_7_loc_1_phi_fu_288_p4_assign_proc : process(ap_block_pp0_stage0, kernel_data_V_7_loc_1_reg_285, icmp_ln78_reg_2399_pp0_iter1_reg, kernel_data_V_7_ret_reg_2456, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_kernel_data_V_7_loc_1_phi_fu_288_p4 <= kernel_data_V_7_ret_reg_2456;
        else 
            ap_phi_mux_kernel_data_V_7_loc_1_phi_fu_288_p4 <= kernel_data_V_7_loc_1_reg_285;
        end if; 
    end process;


    ap_phi_mux_kernel_data_V_8_loc_1_phi_fu_298_p4_assign_proc : process(ap_block_pp0_stage0, kernel_data_V_8_loc_1_reg_295, icmp_ln78_reg_2399_pp0_iter1_reg, kernel_data_V_8_ret_reg_2464, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln78_reg_2399_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_kernel_data_V_8_loc_1_phi_fu_298_p4 <= kernel_data_V_8_ret_reg_2464;
        else 
            ap_phi_mux_kernel_data_V_8_loc_1_phi_fu_298_p4 <= kernel_data_V_8_loc_1_reg_295;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp41)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp41) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_ce <= ap_const_logic_1;
        else 
            call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_start <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_1430_ap_start_reg;

    data_V_data_V_blk_n_assign_proc : process(data_V_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln78_reg_2399)
    begin
        if (((icmp_ln78_reg_2399 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_data_V_blk_n <= data_V_data_V_empty_n;
        else 
            data_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln78_reg_2399, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln78_reg_2399 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_V_data_V_read <= ap_const_logic_1;
        else 
            data_V_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln272_1_fu_1614_p2 <= "1" when (sY_loc_1_fu_214 = ap_const_lv32_2) else "0";
    icmp_ln272_2_fu_1630_p2 <= "1" when (signed(tmp_fu_1620_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln272_3_fu_1646_p2 <= "1" when (signed(tmp_40_fu_1636_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln272_fu_1608_p2 <= "1" when (sX_loc_1_fu_206 = ap_const_lv32_2) else "0";
    icmp_ln293_fu_2186_p2 <= "1" when (pX_loc_1_fu_202 = ap_const_lv32_9) else "0";
    icmp_ln297_fu_2252_p2 <= "1" when (pY_loc_1_fu_210 = ap_const_lv32_9) else "0";
    icmp_ln78_fu_1512_p2 <= "1" when (indvar_flatten_reg_234 = ap_const_lv7_64) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op209 <= (res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    mul_ln1118_958_fu_322_p0 <= kernel_data_V_1_ret_reg_2429;
    mul_ln1118_958_fu_322_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_958_fu_322_p0) * signed(ap_const_lv26_3FFFED4))), 26));
    mul_ln1118_959_fu_319_p0 <= kernel_data_V_1_ret_reg_2429;
    mul_ln1118_959_fu_319_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_959_fu_319_p0) * signed('0' &ap_const_lv23_26))), 23));
    mul_ln1118_960_fu_317_p0 <= sext_ln1118_868_fu_1758_p1(16 - 1 downto 0);
    mul_ln1118_960_fu_317_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_960_fu_317_p0) * signed(ap_const_lv26_3FFFE95))), 26));
    mul_ln1118_961_fu_311_p0 <= sext_ln1118_868_fu_1758_p1(16 - 1 downto 0);
    mul_ln1118_961_fu_311_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_961_fu_311_p0) * signed('0' &ap_const_lv26_167))), 26));
    mul_ln1118_962_fu_306_p0 <= kernel_data_V_3_ret_reg_2415;
    mul_ln1118_962_fu_306_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_962_fu_306_p0) * signed(ap_const_lv23_7FFFCC))), 23));
    mul_ln1118_963_fu_310_p0 <= kernel_data_V_4_ret_reg_2442;
    mul_ln1118_963_fu_310_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_963_fu_310_p0) * signed('0' &ap_const_lv25_D6))), 25));
    mul_ln1118_964_fu_307_p0 <= kernel_data_V_4_ret_reg_2442;
    mul_ln1118_964_fu_307_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_964_fu_307_p0) * signed(ap_const_lv26_3FFFE21))), 26));
    mul_ln1118_965_fu_320_p0 <= kernel_data_V_5_ret_reg_2449;
    mul_ln1118_965_fu_320_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_965_fu_320_p0) * signed('0' &ap_const_lv26_1C5))), 26));
    mul_ln1118_966_fu_314_p0 <= kernel_data_V_5_ret_reg_2449;
    mul_ln1118_966_fu_314_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_966_fu_314_p0) * signed(ap_const_lv23_7FFFCA))), 23));
    mul_ln1118_967_fu_308_p0 <= kernel_data_V_6_ret_reg_2408;
    mul_ln1118_967_fu_308_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_967_fu_308_p0) * signed('0' &ap_const_lv26_191))), 26));
    mul_ln1118_968_fu_312_p0 <= kernel_data_V_7_ret_reg_2456;
    mul_ln1118_968_fu_312_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_968_fu_312_p0) * signed(ap_const_lv25_1FFFF5E))), 25));
    mul_ln1118_969_fu_305_p0 <= kernel_data_V_8_ret_reg_2464;
    mul_ln1118_969_fu_305_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_969_fu_305_p0) * signed(ap_const_lv26_3FFFEB0))), 26));
    mul_ln1118_970_fu_321_p0 <= kernel_data_V_8_ret_reg_2464;
    mul_ln1118_970_fu_321_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_970_fu_321_p0) * signed('0' &ap_const_lv25_A5))), 25));
    mul_ln1118_fu_313_p0 <= kernel_data_V_0_ret_reg_2422;
    mul_ln1118_fu_313_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1118_fu_313_p0) * signed('0' &ap_const_lv26_178))), 26));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln272_2_reg_2471)
    begin
        if (((ap_const_lv1_1 = and_ln272_2_reg_2471) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= res_out_0_V_reg_2475;

    res_V_data_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln272_2_reg_2471, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln272_2_reg_2471) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, and_ln272_2_reg_2471)
    begin
        if (((ap_const_lv1_1 = and_ln272_2_reg_2471) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= acc_1_V_reg_2480;

    res_V_data_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln272_2_reg_2471, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln272_2_reg_2471) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;

    res_out_0_V_fu_2107_p2 <= std_logic_vector(unsigned(add_ln703_1288_fu_2069_p2) + unsigned(add_ln703_1292_fu_2101_p2));
    select_ln303_fu_2279_p3 <= 
        ap_const_lv32_2 when (icmp_ln272_1_fu_1614_p2(0) = '1') else 
        add_ln303_fu_2273_p2;
    select_ln308_fu_2213_p3 <= 
        ap_const_lv32_2 when (icmp_ln272_fu_1608_p2(0) = '1') else 
        add_ln308_fu_2207_p2;
        sext_ln1118_862_fu_1691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_1684_p3),22));

        sext_ln1118_863_fu_1702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_s_fu_1695_p3),22));

        sext_ln1118_864_fu_1722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_fu_1712_p4),13));

        sext_ln1118_867_fu_1754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1270_fu_1744_p4),14));

        sext_ln1118_868_fu_1758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_data_V_2_ret_reg_2436),26));

        sext_ln1118_870_fu_1794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_369_fu_1787_p3),24));

        sext_ln1118_871_fu_1805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_370_fu_1798_p3),24));

        sext_ln1118_872_fu_1825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1271_fu_1815_p4),15));

        sext_ln1118_873_fu_1839_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1272_fu_1829_p4),14));

        sext_ln1118_878_fu_1903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1274_fu_1893_p4),14));

        sext_ln1118_880_fu_1918_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_371_fu_1911_p3),23));

        sext_ln1118_881_fu_1929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_372_fu_1922_p3),23));

        sext_ln1118_882_fu_1949_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1275_fu_1939_p4),14));

        sext_ln1118_884_fu_1988_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_373_fu_1981_p3),26));

        sext_ln1118_885_fu_1999_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_374_fu_1992_p3),26));

        sext_ln703_573_fu_2097_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_1291_fu_2091_p2),16));

        sext_ln703_574_fu_2143_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_1298_fu_2137_p2),15));

        sext_ln703_575_fu_2153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_1299_fu_2147_p2),14));

        sext_ln703_576_fu_2163_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_1300_fu_2157_p2),15));

        sext_ln703_577_fu_2173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_1301_fu_2167_p2),16));

        sext_ln703_fu_2087_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_1290_fu_2081_p2),15));

        sext_ln708_438_fu_1977_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1276_fu_1967_p4),16));

        sext_ln708_439_fu_2047_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1277_fu_2037_p4),16));

        sext_ln708_fu_1861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1273_fu_1851_p4),16));

    shl_ln1118_369_fu_1787_p3 <= (kernel_data_V_3_ret_reg_2415 & ap_const_lv7_0);
    shl_ln1118_370_fu_1798_p3 <= (kernel_data_V_3_ret_reg_2415 & ap_const_lv5_0);
    shl_ln1118_371_fu_1911_p3 <= (kernel_data_V_6_ret_reg_2408 & ap_const_lv6_0);
    shl_ln1118_372_fu_1922_p3 <= (kernel_data_V_6_ret_reg_2408 & ap_const_lv4_0);
    shl_ln1118_373_fu_1981_p3 <= (kernel_data_V_7_ret_reg_2456 & ap_const_lv9_0);
    shl_ln1118_374_fu_1992_p3 <= (kernel_data_V_7_ret_reg_2456 & ap_const_lv6_0);
    shl_ln1118_s_fu_1695_p3 <= (kernel_data_V_0_ret_reg_2422 & ap_const_lv3_0);
    shl_ln_fu_1684_p3 <= (kernel_data_V_0_ret_reg_2422 & ap_const_lv5_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln1118_279_fu_2003_p2 <= std_logic_vector(signed(sext_ln1118_885_fu_1999_p1) - signed(sext_ln1118_884_fu_1988_p1));
    sub_ln1118_fu_1809_p2 <= std_logic_vector(signed(sext_ln1118_870_fu_1794_p1) - signed(sext_ln1118_871_fu_1805_p1));
    tmp_40_fu_1636_p4 <= pX_loc_1_fu_202(31 downto 1);
    tmp_fu_1620_p4 <= pY_loc_1_fu_210(31 downto 1);
    trunc_ln708_1247_fu_1734_p4 <= mul_ln1118_958_fu_322_p2(25 downto 10);
    trunc_ln708_1249_fu_1763_p4 <= mul_ln1118_960_fu_317_p2(25 downto 10);
    trunc_ln708_1250_fu_1773_p4 <= mul_ln1118_961_fu_311_p2(25 downto 10);
    trunc_ln708_1254_fu_1865_p4 <= mul_ln1118_964_fu_307_p2(25 downto 10);
    trunc_ln708_1255_fu_1883_p4 <= mul_ln1118_965_fu_320_p2(25 downto 10);
    trunc_ln708_1258_fu_1953_p4 <= mul_ln1118_967_fu_308_p2(25 downto 10);
    trunc_ln708_1260_fu_2009_p4 <= sub_ln1118_279_fu_2003_p2(25 downto 10);
    trunc_ln708_1261_fu_2027_p4 <= mul_ln1118_969_fu_305_p2(25 downto 10);
    trunc_ln708_1270_fu_1744_p4 <= mul_ln1118_959_fu_319_p2(22 downto 10);
    trunc_ln708_1271_fu_1815_p4 <= sub_ln1118_fu_1809_p2(23 downto 10);
    trunc_ln708_1272_fu_1829_p4 <= mul_ln1118_962_fu_306_p2(22 downto 10);
    trunc_ln708_1273_fu_1851_p4 <= mul_ln1118_963_fu_310_p2(24 downto 10);
    trunc_ln708_1274_fu_1893_p4 <= mul_ln1118_966_fu_314_p2(22 downto 10);
    trunc_ln708_1275_fu_1939_p4 <= add_ln1118_72_fu_1933_p2(22 downto 10);
    trunc_ln708_1276_fu_1967_p4 <= mul_ln1118_968_fu_312_p2(24 downto 10);
    trunc_ln708_1277_fu_2037_p4 <= mul_ln1118_970_fu_321_p2(24 downto 10);
    trunc_ln708_s_fu_1712_p4 <= add_ln1118_fu_1706_p2(21 downto 10);
    trunc_ln_fu_1674_p4 <= mul_ln1118_fu_313_p2(25 downto 10);
end behav;
