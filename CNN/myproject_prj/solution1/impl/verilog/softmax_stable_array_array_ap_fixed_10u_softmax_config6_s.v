// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_ap_fixed_10u_softmax_config6_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_TREADY,
        res_V_data_0_V_TDATA,
        res_V_data_0_V_TVALID,
        res_V_data_1_V_TDATA,
        res_V_data_1_V_TVALID,
        res_V_data_1_V_TREADY,
        res_V_data_2_V_TDATA,
        res_V_data_2_V_TVALID,
        res_V_data_2_V_TREADY,
        res_V_data_3_V_TDATA,
        res_V_data_3_V_TVALID,
        res_V_data_3_V_TREADY,
        res_V_data_4_V_TDATA,
        res_V_data_4_V_TVALID,
        res_V_data_4_V_TREADY,
        res_V_data_5_V_TDATA,
        res_V_data_5_V_TVALID,
        res_V_data_5_V_TREADY,
        res_V_data_6_V_TDATA,
        res_V_data_6_V_TVALID,
        res_V_data_6_V_TREADY,
        res_V_data_7_V_TDATA,
        res_V_data_7_V_TVALID,
        res_V_data_7_V_TREADY,
        res_V_data_8_V_TDATA,
        res_V_data_8_V_TVALID,
        res_V_data_8_V_TREADY,
        res_V_data_9_V_TDATA,
        res_V_data_9_V_TVALID,
        res_V_data_9_V_TREADY,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_TDATA_blk_n,
        res_V_data_1_V_TDATA_blk_n,
        res_V_data_2_V_TDATA_blk_n,
        res_V_data_3_V_TDATA_blk_n,
        res_V_data_4_V_TDATA_blk_n,
        res_V_data_5_V_TDATA_blk_n,
        res_V_data_6_V_TDATA_blk_n,
        res_V_data_7_V_TDATA_blk_n,
        res_V_data_8_V_TDATA_blk_n,
        res_V_data_9_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
input   res_V_data_0_V_TREADY;
output  [15:0] res_V_data_0_V_TDATA;
output   res_V_data_0_V_TVALID;
output  [15:0] res_V_data_1_V_TDATA;
output   res_V_data_1_V_TVALID;
input   res_V_data_1_V_TREADY;
output  [15:0] res_V_data_2_V_TDATA;
output   res_V_data_2_V_TVALID;
input   res_V_data_2_V_TREADY;
output  [15:0] res_V_data_3_V_TDATA;
output   res_V_data_3_V_TVALID;
input   res_V_data_3_V_TREADY;
output  [15:0] res_V_data_4_V_TDATA;
output   res_V_data_4_V_TVALID;
input   res_V_data_4_V_TREADY;
output  [15:0] res_V_data_5_V_TDATA;
output   res_V_data_5_V_TVALID;
input   res_V_data_5_V_TREADY;
output  [15:0] res_V_data_6_V_TDATA;
output   res_V_data_6_V_TVALID;
input   res_V_data_6_V_TREADY;
output  [15:0] res_V_data_7_V_TDATA;
output   res_V_data_7_V_TVALID;
input   res_V_data_7_V_TREADY;
output  [15:0] res_V_data_8_V_TDATA;
output   res_V_data_8_V_TVALID;
input   res_V_data_8_V_TREADY;
output  [15:0] res_V_data_9_V_TDATA;
output   res_V_data_9_V_TVALID;
input   res_V_data_9_V_TREADY;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_TDATA_blk_n;
output   res_V_data_1_V_TDATA_blk_n;
output   res_V_data_2_V_TDATA_blk_n;
output   res_V_data_3_V_TDATA_blk_n;
output   res_V_data_4_V_TDATA_blk_n;
output   res_V_data_5_V_TDATA_blk_n;
output   res_V_data_6_V_TDATA_blk_n;
output   res_V_data_7_V_TDATA_blk_n;
output   res_V_data_8_V_TDATA_blk_n;
output   res_V_data_9_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_TVALID;
reg res_V_data_1_V_TVALID;
reg res_V_data_2_V_TVALID;
reg res_V_data_3_V_TVALID;
reg res_V_data_4_V_TVALID;
reg res_V_data_5_V_TVALID;
reg res_V_data_6_V_TVALID;
reg res_V_data_7_V_TVALID;
reg res_V_data_8_V_TVALID;
reg res_V_data_9_V_TVALID;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_TDATA_blk_n;
reg res_V_data_1_V_TDATA_blk_n;
reg res_V_data_2_V_TDATA_blk_n;
reg res_V_data_3_V_TDATA_blk_n;
reg res_V_data_4_V_TDATA_blk_n;
reg res_V_data_5_V_TDATA_blk_n;
reg res_V_data_6_V_TDATA_blk_n;
reg res_V_data_7_V_TDATA_blk_n;
reg res_V_data_8_V_TDATA_blk_n;
reg res_V_data_9_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op5;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [17:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [17:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [17:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [17:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [17:0] exp_table1_q4;
wire   [9:0] exp_table1_address5;
reg    exp_table1_ce5;
wire   [17:0] exp_table1_q5;
wire   [9:0] exp_table1_address6;
reg    exp_table1_ce6;
wire   [17:0] exp_table1_q6;
wire   [9:0] exp_table1_address7;
reg    exp_table1_ce7;
wire   [17:0] exp_table1_q7;
wire   [9:0] exp_table1_address8;
reg    exp_table1_ce8;
wire   [17:0] exp_table1_q8;
wire   [9:0] exp_table1_address9;
reg    exp_table1_ce9;
wire   [17:0] exp_table1_q9;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [13:0] invert_table2_q0;
reg  signed [15:0] data_array_0_V_reg_2130;
reg  signed [15:0] data_array_1_V_reg_2135;
reg  signed [15:0] data_array_2_V_reg_2140;
reg  signed [15:0] data_array_3_V_reg_2145;
reg  signed [15:0] data_array_4_V_reg_2150;
reg  signed [15:0] data_array_5_V_reg_2155;
reg  signed [15:0] data_array_6_V_reg_2160;
reg  signed [15:0] data_array_7_V_reg_2165;
reg  signed [15:0] data_array_8_V_reg_2170;
reg  signed [15:0] data_array_9_V_reg_2177;
wire   [15:0] select_ln86_6_fu_923_p3;
reg   [15:0] select_ln86_6_reg_2184;
reg  signed [17:0] exp_res_0_V_reg_2240;
reg  signed [17:0] exp_res_1_V_reg_2245;
reg  signed [17:0] exp_res_2_V_reg_2250;
reg  signed [17:0] exp_res_3_V_reg_2255;
reg  signed [17:0] exp_res_4_V_reg_2260;
reg  signed [17:0] exp_res_5_V_reg_2265;
reg  signed [17:0] exp_res_6_V_reg_2270;
reg  signed [17:0] exp_res_7_V_reg_2275;
reg  signed [17:0] exp_res_8_V_reg_2280;
reg  signed [17:0] exp_res_9_V_reg_2285;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln230_fu_1541_p1;
wire   [63:0] zext_ln230_1_fu_1580_p1;
wire   [63:0] zext_ln230_2_fu_1619_p1;
wire   [63:0] zext_ln230_3_fu_1658_p1;
wire   [63:0] zext_ln230_4_fu_1697_p1;
wire   [63:0] zext_ln230_5_fu_1736_p1;
wire   [63:0] zext_ln230_6_fu_1775_p1;
wire   [63:0] zext_ln230_7_fu_1814_p1;
wire   [63:0] zext_ln230_8_fu_1853_p1;
wire   [63:0] zext_ln230_9_fu_1892_p1;
wire   [63:0] zext_ln238_fu_1961_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [13:0] mul_ln1118_fu_422_p0;
wire  signed [25:0] sext_ln242_fu_1966_p1;
wire  signed [17:0] mul_ln1118_fu_422_p1;
wire  signed [13:0] mul_ln1118_2_fu_423_p0;
wire  signed [17:0] mul_ln1118_2_fu_423_p1;
wire  signed [13:0] mul_ln1118_4_fu_424_p0;
wire  signed [17:0] mul_ln1118_4_fu_424_p1;
wire  signed [13:0] mul_ln1118_6_fu_425_p0;
wire  signed [17:0] mul_ln1118_6_fu_425_p1;
wire  signed [13:0] mul_ln1118_3_fu_426_p0;
wire  signed [17:0] mul_ln1118_3_fu_426_p1;
wire  signed [13:0] mul_ln1118_7_fu_427_p0;
wire  signed [17:0] mul_ln1118_7_fu_427_p1;
wire  signed [13:0] mul_ln1118_5_fu_428_p0;
wire  signed [17:0] mul_ln1118_5_fu_428_p1;
wire  signed [13:0] mul_ln1118_1_fu_429_p0;
wire  signed [17:0] mul_ln1118_1_fu_429_p1;
wire  signed [13:0] mul_ln1118_8_fu_430_p0;
wire  signed [17:0] mul_ln1118_8_fu_430_p1;
wire  signed [13:0] mul_ln1118_9_fu_431_p0;
wire  signed [17:0] mul_ln1118_9_fu_431_p1;
wire  signed [15:0] icmp_ln1496_fu_833_p0;
wire  signed [15:0] icmp_ln1496_fu_833_p1;
wire   [0:0] icmp_ln1496_fu_833_p2;
wire  signed [15:0] select_ln86_fu_839_p1;
wire  signed [15:0] select_ln86_fu_839_p2;
wire  signed [15:0] icmp_ln1496_1_fu_847_p0;
wire  signed [15:0] icmp_ln1496_1_fu_847_p1;
wire   [0:0] icmp_ln1496_1_fu_847_p2;
wire  signed [15:0] select_ln86_1_fu_853_p1;
wire  signed [15:0] select_ln86_1_fu_853_p2;
wire   [15:0] select_ln86_fu_839_p3;
wire   [15:0] select_ln86_1_fu_853_p3;
wire   [0:0] icmp_ln1496_2_fu_861_p2;
wire  signed [15:0] icmp_ln1496_3_fu_875_p0;
wire  signed [15:0] icmp_ln1496_3_fu_875_p1;
wire   [0:0] icmp_ln1496_3_fu_875_p2;
wire  signed [15:0] select_ln86_3_fu_881_p1;
wire  signed [15:0] select_ln86_3_fu_881_p2;
wire  signed [15:0] icmp_ln1496_4_fu_889_p0;
wire  signed [15:0] icmp_ln1496_4_fu_889_p1;
wire   [0:0] icmp_ln1496_4_fu_889_p2;
wire  signed [15:0] select_ln86_4_fu_895_p1;
wire  signed [15:0] select_ln86_4_fu_895_p2;
wire   [15:0] select_ln86_3_fu_881_p3;
wire   [15:0] select_ln86_4_fu_895_p3;
wire   [0:0] icmp_ln1496_5_fu_903_p2;
wire   [15:0] select_ln86_2_fu_867_p3;
wire   [15:0] select_ln86_5_fu_909_p3;
wire   [0:0] icmp_ln1496_6_fu_917_p2;
wire   [0:0] icmp_ln1496_7_fu_931_p2;
wire   [15:0] select_ln86_7_fu_935_p3;
wire   [0:0] icmp_ln1496_8_fu_941_p2;
wire   [15:0] x_max_V_fu_946_p3;
wire  signed [16:0] sext_ln703_fu_953_p1;
wire  signed [16:0] sext_ln703_1_fu_956_p1;
wire   [16:0] sub_ln1193_fu_960_p2;
wire   [0:0] tmp_21_fu_974_p3;
wire   [0:0] tmp_fu_966_p3;
wire   [0:0] xor_ln786_fu_982_p2;
wire   [0:0] xor_ln340_fu_1000_p2;
wire  signed [16:0] sext_ln703_2_fu_1012_p1;
wire   [16:0] sub_ln1193_1_fu_1015_p2;
wire   [0:0] tmp_23_fu_1029_p3;
wire   [0:0] tmp_22_fu_1021_p3;
wire   [0:0] xor_ln786_1_fu_1037_p2;
wire   [0:0] xor_ln340_1_fu_1055_p2;
wire  signed [16:0] sext_ln703_3_fu_1067_p1;
wire   [16:0] sub_ln1193_2_fu_1070_p2;
wire   [0:0] tmp_25_fu_1084_p3;
wire   [0:0] tmp_24_fu_1076_p3;
wire   [0:0] xor_ln786_2_fu_1092_p2;
wire   [0:0] xor_ln340_2_fu_1110_p2;
wire  signed [16:0] sext_ln703_4_fu_1122_p1;
wire   [16:0] sub_ln1193_3_fu_1125_p2;
wire   [0:0] tmp_27_fu_1139_p3;
wire   [0:0] tmp_26_fu_1131_p3;
wire   [0:0] xor_ln786_3_fu_1147_p2;
wire   [0:0] xor_ln340_3_fu_1165_p2;
wire  signed [16:0] sext_ln703_5_fu_1177_p1;
wire   [16:0] sub_ln1193_4_fu_1180_p2;
wire   [0:0] tmp_29_fu_1194_p3;
wire   [0:0] tmp_28_fu_1186_p3;
wire   [0:0] xor_ln786_4_fu_1202_p2;
wire   [0:0] xor_ln340_4_fu_1220_p2;
wire  signed [16:0] sext_ln703_6_fu_1232_p1;
wire   [16:0] sub_ln1193_5_fu_1235_p2;
wire   [0:0] tmp_31_fu_1249_p3;
wire   [0:0] tmp_30_fu_1241_p3;
wire   [0:0] xor_ln786_5_fu_1257_p2;
wire   [0:0] xor_ln340_5_fu_1275_p2;
wire  signed [16:0] sext_ln703_7_fu_1287_p1;
wire   [16:0] sub_ln1193_6_fu_1290_p2;
wire   [0:0] tmp_33_fu_1304_p3;
wire   [0:0] tmp_32_fu_1296_p3;
wire   [0:0] xor_ln786_6_fu_1312_p2;
wire   [0:0] xor_ln340_6_fu_1330_p2;
wire  signed [16:0] sext_ln703_8_fu_1342_p1;
wire   [16:0] sub_ln1193_7_fu_1345_p2;
wire   [0:0] tmp_35_fu_1359_p3;
wire   [0:0] tmp_34_fu_1351_p3;
wire   [0:0] xor_ln786_7_fu_1367_p2;
wire   [0:0] xor_ln340_7_fu_1385_p2;
wire  signed [16:0] sext_ln703_9_fu_1397_p1;
wire   [16:0] sub_ln1193_8_fu_1400_p2;
wire   [0:0] tmp_37_fu_1414_p3;
wire   [0:0] tmp_36_fu_1406_p3;
wire   [0:0] xor_ln786_8_fu_1422_p2;
wire   [0:0] xor_ln340_8_fu_1440_p2;
wire  signed [16:0] sext_ln703_10_fu_1452_p1;
wire   [16:0] sub_ln1193_9_fu_1455_p2;
wire   [0:0] tmp_39_fu_1469_p3;
wire   [0:0] tmp_38_fu_1461_p3;
wire   [0:0] xor_ln786_9_fu_1477_p2;
wire   [0:0] xor_ln340_9_fu_1495_p2;
wire   [0:0] xor_ln340_10_fu_994_p2;
wire   [9:0] tmp_11_fu_1507_p4;
wire   [0:0] and_ln786_fu_988_p2;
wire   [0:0] or_ln340_fu_1006_p2;
wire   [9:0] select_ln340_fu_1517_p3;
wire   [9:0] select_ln388_fu_1525_p3;
wire   [9:0] y_V_fu_1533_p3;
wire   [0:0] xor_ln340_11_fu_1049_p2;
wire   [9:0] tmp_12_fu_1546_p4;
wire   [0:0] and_ln786_1_fu_1043_p2;
wire   [0:0] or_ln340_1_fu_1061_p2;
wire   [9:0] select_ln340_2_fu_1556_p3;
wire   [9:0] select_ln388_1_fu_1564_p3;
wire   [9:0] y_V_1_fu_1572_p3;
wire   [0:0] xor_ln340_12_fu_1104_p2;
wire   [9:0] tmp_13_fu_1585_p4;
wire   [0:0] and_ln786_2_fu_1098_p2;
wire   [0:0] or_ln340_2_fu_1116_p2;
wire   [9:0] select_ln340_4_fu_1595_p3;
wire   [9:0] select_ln388_2_fu_1603_p3;
wire   [9:0] y_V_2_fu_1611_p3;
wire   [0:0] xor_ln340_13_fu_1159_p2;
wire   [9:0] tmp_14_fu_1624_p4;
wire   [0:0] and_ln786_3_fu_1153_p2;
wire   [0:0] or_ln340_3_fu_1171_p2;
wire   [9:0] select_ln340_6_fu_1634_p3;
wire   [9:0] select_ln388_3_fu_1642_p3;
wire   [9:0] y_V_3_fu_1650_p3;
wire   [0:0] xor_ln340_14_fu_1214_p2;
wire   [9:0] tmp_15_fu_1663_p4;
wire   [0:0] and_ln786_4_fu_1208_p2;
wire   [0:0] or_ln340_4_fu_1226_p2;
wire   [9:0] select_ln340_8_fu_1673_p3;
wire   [9:0] select_ln388_4_fu_1681_p3;
wire   [9:0] y_V_4_fu_1689_p3;
wire   [0:0] xor_ln340_15_fu_1269_p2;
wire   [9:0] tmp_16_fu_1702_p4;
wire   [0:0] and_ln786_5_fu_1263_p2;
wire   [0:0] or_ln340_5_fu_1281_p2;
wire   [9:0] select_ln340_10_fu_1712_p3;
wire   [9:0] select_ln388_5_fu_1720_p3;
wire   [9:0] y_V_5_fu_1728_p3;
wire   [0:0] xor_ln340_16_fu_1324_p2;
wire   [9:0] tmp_17_fu_1741_p4;
wire   [0:0] and_ln786_6_fu_1318_p2;
wire   [0:0] or_ln340_6_fu_1336_p2;
wire   [9:0] select_ln340_12_fu_1751_p3;
wire   [9:0] select_ln388_6_fu_1759_p3;
wire   [9:0] y_V_6_fu_1767_p3;
wire   [0:0] xor_ln340_17_fu_1379_p2;
wire   [9:0] tmp_18_fu_1780_p4;
wire   [0:0] and_ln786_7_fu_1373_p2;
wire   [0:0] or_ln340_7_fu_1391_p2;
wire   [9:0] select_ln340_14_fu_1790_p3;
wire   [9:0] select_ln388_7_fu_1798_p3;
wire   [9:0] y_V_7_fu_1806_p3;
wire   [0:0] xor_ln340_18_fu_1434_p2;
wire   [9:0] tmp_19_fu_1819_p4;
wire   [0:0] and_ln786_8_fu_1428_p2;
wire   [0:0] or_ln340_8_fu_1446_p2;
wire   [9:0] select_ln340_16_fu_1829_p3;
wire   [9:0] select_ln388_8_fu_1837_p3;
wire   [9:0] y_V_8_fu_1845_p3;
wire   [0:0] xor_ln340_19_fu_1489_p2;
wire   [9:0] tmp_20_fu_1858_p4;
wire   [0:0] and_ln786_9_fu_1483_p2;
wire   [0:0] or_ln340_9_fu_1501_p2;
wire   [9:0] select_ln340_18_fu_1868_p3;
wire   [9:0] select_ln388_9_fu_1876_p3;
wire   [9:0] y_V_9_fu_1884_p3;
wire  signed [17:0] add_ln703_fu_1897_p0;
wire  signed [17:0] add_ln703_fu_1897_p1;
wire  signed [17:0] add_ln703_1_fu_1903_p0;
wire  signed [17:0] add_ln703_1_fu_1903_p1;
wire  signed [17:0] add_ln703_2_fu_1909_p0;
wire   [17:0] add_ln703_1_fu_1903_p2;
wire   [17:0] add_ln703_fu_1897_p2;
wire   [17:0] add_ln703_2_fu_1909_p2;
wire  signed [17:0] add_ln703_4_fu_1921_p0;
wire  signed [17:0] add_ln703_4_fu_1921_p1;
wire  signed [17:0] add_ln703_5_fu_1927_p0;
wire  signed [17:0] add_ln703_5_fu_1927_p1;
wire  signed [17:0] add_ln703_6_fu_1933_p0;
wire   [17:0] add_ln703_5_fu_1927_p2;
wire   [17:0] add_ln703_4_fu_1921_p2;
wire   [17:0] add_ln703_6_fu_1933_p2;
wire   [17:0] add_ln703_3_fu_1915_p2;
wire   [17:0] add_ln703_7_fu_1939_p2;
wire   [17:0] exp_sum_V_fu_1945_p2;
wire   [9:0] y_V_10_fu_1951_p4;
wire   [25:0] mul_ln1118_fu_422_p2;
wire   [25:0] mul_ln1118_1_fu_429_p2;
wire   [25:0] mul_ln1118_2_fu_423_p2;
wire   [25:0] mul_ln1118_3_fu_426_p2;
wire   [25:0] mul_ln1118_4_fu_424_p2;
wire   [25:0] mul_ln1118_5_fu_428_p2;
wire   [25:0] mul_ln1118_6_fu_425_p2;
wire   [25:0] mul_ln1118_7_fu_427_p2;
wire   [25:0] mul_ln1118_8_fu_430_p2;
wire   [25:0] mul_ln1118_9_fu_431_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

softmax_stable_array_array_ap_fixed_10u_softmax_config6_sdEe #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4),
    .address5(exp_table1_address5),
    .ce5(exp_table1_ce5),
    .q5(exp_table1_q5),
    .address6(exp_table1_address6),
    .ce6(exp_table1_ce6),
    .q6(exp_table1_q6),
    .address7(exp_table1_address7),
    .ce7(exp_table1_ce7),
    .q7(exp_table1_q7),
    .address8(exp_table1_address8),
    .ce8(exp_table1_ce8),
    .q8(exp_table1_q8),
    .address9(exp_table1_address9),
    .ce9(exp_table1_ce9),
    .q9(exp_table1_q9)
);

softmax_stable_array_array_ap_fixed_10u_softmax_config6_seOg #(
    .DataWidth( 14 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_array_0_V_reg_2130 <= data_V_data_0_V_dout;
        data_array_1_V_reg_2135 <= data_V_data_1_V_dout;
        data_array_2_V_reg_2140 <= data_V_data_2_V_dout;
        data_array_3_V_reg_2145 <= data_V_data_3_V_dout;
        data_array_4_V_reg_2150 <= data_V_data_4_V_dout;
        data_array_5_V_reg_2155 <= data_V_data_5_V_dout;
        data_array_6_V_reg_2160 <= data_V_data_6_V_dout;
        data_array_7_V_reg_2165 <= data_V_data_7_V_dout;
        data_array_8_V_reg_2170 <= data_V_data_8_V_dout;
        data_array_9_V_reg_2177 <= data_V_data_9_V_dout;
        select_ln86_6_reg_2184 <= select_ln86_6_fu_923_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_res_0_V_reg_2240 <= exp_table1_q0;
        exp_res_1_V_reg_2245 <= exp_table1_q1;
        exp_res_2_V_reg_2250 <= exp_table1_q2;
        exp_res_3_V_reg_2255 <= exp_table1_q3;
        exp_res_4_V_reg_2260 <= exp_table1_q4;
        exp_res_5_V_reg_2265 <= exp_table1_q5;
        exp_res_6_V_reg_2270 <= exp_table1_q6;
        exp_res_7_V_reg_2275 <= exp_table1_q7;
        exp_res_8_V_reg_2280 <= exp_table1_q8;
        exp_res_9_V_reg_2285 <= exp_table1_q9;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce5 = 1'b1;
    end else begin
        exp_table1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce6 = 1'b1;
    end else begin
        exp_table1_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce7 = 1'b1;
    end else begin
        exp_table1_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce8 = 1'b1;
    end else begin
        exp_table1_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce9 = 1'b1;
    end else begin
        exp_table1_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_0_V_TDATA_blk_n = res_V_data_0_V_TREADY;
    end else begin
        res_V_data_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_0_V_TVALID = 1'b1;
    end else begin
        res_V_data_0_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_1_V_TDATA_blk_n = res_V_data_1_V_TREADY;
    end else begin
        res_V_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_1_V_TVALID = 1'b1;
    end else begin
        res_V_data_1_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_2_V_TDATA_blk_n = res_V_data_2_V_TREADY;
    end else begin
        res_V_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_2_V_TVALID = 1'b1;
    end else begin
        res_V_data_2_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_3_V_TDATA_blk_n = res_V_data_3_V_TREADY;
    end else begin
        res_V_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_3_V_TVALID = 1'b1;
    end else begin
        res_V_data_3_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_4_V_TDATA_blk_n = res_V_data_4_V_TREADY;
    end else begin
        res_V_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_4_V_TVALID = 1'b1;
    end else begin
        res_V_data_4_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_5_V_TDATA_blk_n = res_V_data_5_V_TREADY;
    end else begin
        res_V_data_5_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_5_V_TVALID = 1'b1;
    end else begin
        res_V_data_5_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_6_V_TDATA_blk_n = res_V_data_6_V_TREADY;
    end else begin
        res_V_data_6_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_6_V_TVALID = 1'b1;
    end else begin
        res_V_data_6_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_7_V_TDATA_blk_n = res_V_data_7_V_TREADY;
    end else begin
        res_V_data_7_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_7_V_TVALID = 1'b1;
    end else begin
        res_V_data_7_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_8_V_TDATA_blk_n = res_V_data_8_V_TREADY;
    end else begin
        res_V_data_8_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_8_V_TVALID = 1'b1;
    end else begin
        res_V_data_8_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_9_V_TDATA_blk_n = res_V_data_9_V_TREADY;
    end else begin
        res_V_data_9_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_V_data_9_V_TVALID = 1'b1;
    end else begin
        res_V_data_9_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_1903_p0 = exp_table1_q7;

assign add_ln703_1_fu_1903_p1 = exp_table1_q2;

assign add_ln703_1_fu_1903_p2 = ($signed(add_ln703_1_fu_1903_p0) + $signed(add_ln703_1_fu_1903_p1));

assign add_ln703_2_fu_1909_p0 = exp_table1_q3;

assign add_ln703_2_fu_1909_p2 = ($signed(add_ln703_2_fu_1909_p0) + $signed(add_ln703_1_fu_1903_p2));

assign add_ln703_3_fu_1915_p2 = (add_ln703_fu_1897_p2 + add_ln703_2_fu_1909_p2);

assign add_ln703_4_fu_1921_p0 = exp_table1_q5;

assign add_ln703_4_fu_1921_p1 = exp_table1_q6;

assign add_ln703_4_fu_1921_p2 = ($signed(add_ln703_4_fu_1921_p0) + $signed(add_ln703_4_fu_1921_p1));

assign add_ln703_5_fu_1927_p0 = exp_table1_q8;

assign add_ln703_5_fu_1927_p1 = exp_table1_q9;

assign add_ln703_5_fu_1927_p2 = ($signed(add_ln703_5_fu_1927_p0) + $signed(add_ln703_5_fu_1927_p1));

assign add_ln703_6_fu_1933_p0 = exp_table1_q4;

assign add_ln703_6_fu_1933_p2 = ($signed(add_ln703_6_fu_1933_p0) + $signed(add_ln703_5_fu_1927_p2));

assign add_ln703_7_fu_1939_p2 = (add_ln703_4_fu_1921_p2 + add_ln703_6_fu_1933_p2);

assign add_ln703_fu_1897_p0 = exp_table1_q1;

assign add_ln703_fu_1897_p1 = exp_table1_q0;

assign add_ln703_fu_1897_p2 = ($signed(add_ln703_fu_1897_p0) + $signed(add_ln703_fu_1897_p1));

assign and_ln786_1_fu_1043_p2 = (xor_ln786_1_fu_1037_p2 & tmp_22_fu_1021_p3);

assign and_ln786_2_fu_1098_p2 = (xor_ln786_2_fu_1092_p2 & tmp_24_fu_1076_p3);

assign and_ln786_3_fu_1153_p2 = (xor_ln786_3_fu_1147_p2 & tmp_26_fu_1131_p3);

assign and_ln786_4_fu_1208_p2 = (xor_ln786_4_fu_1202_p2 & tmp_28_fu_1186_p3);

assign and_ln786_5_fu_1263_p2 = (xor_ln786_5_fu_1257_p2 & tmp_30_fu_1241_p3);

assign and_ln786_6_fu_1318_p2 = (xor_ln786_6_fu_1312_p2 & tmp_32_fu_1296_p3);

assign and_ln786_7_fu_1373_p2 = (xor_ln786_7_fu_1367_p2 & tmp_34_fu_1351_p3);

assign and_ln786_8_fu_1428_p2 = (xor_ln786_8_fu_1422_p2 & tmp_36_fu_1406_p3);

assign and_ln786_9_fu_1483_p2 = (xor_ln786_9_fu_1477_p2 & tmp_38_fu_1461_p3);

assign and_ln786_fu_988_p2 = (xor_ln786_fu_982_p2 & tmp_fu_966_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((io_acc_block_signal_op5 == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & ((io_acc_block_signal_op5 == 1'b0) | (ap_start == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((res_V_data_0_V_TREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_start == 1'b1) & ((io_acc_block_signal_op5 == 1'b0) | (ap_start == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((io_acc_block_signal_op5 == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_sum_V_fu_1945_p2 = (add_ln703_3_fu_1915_p2 + add_ln703_7_fu_1939_p2);

assign exp_table1_address0 = zext_ln230_fu_1541_p1;

assign exp_table1_address1 = zext_ln230_1_fu_1580_p1;

assign exp_table1_address2 = zext_ln230_2_fu_1619_p1;

assign exp_table1_address3 = zext_ln230_3_fu_1658_p1;

assign exp_table1_address4 = zext_ln230_4_fu_1697_p1;

assign exp_table1_address5 = zext_ln230_5_fu_1736_p1;

assign exp_table1_address6 = zext_ln230_6_fu_1775_p1;

assign exp_table1_address7 = zext_ln230_7_fu_1814_p1;

assign exp_table1_address8 = zext_ln230_8_fu_1853_p1;

assign exp_table1_address9 = zext_ln230_9_fu_1892_p1;

assign icmp_ln1496_1_fu_847_p0 = data_V_data_2_V_dout;

assign icmp_ln1496_1_fu_847_p1 = data_V_data_3_V_dout;

assign icmp_ln1496_1_fu_847_p2 = (($signed(icmp_ln1496_1_fu_847_p0) < $signed(icmp_ln1496_1_fu_847_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_861_p2 = (($signed(select_ln86_fu_839_p3) < $signed(select_ln86_1_fu_853_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_875_p0 = data_V_data_4_V_dout;

assign icmp_ln1496_3_fu_875_p1 = data_V_data_5_V_dout;

assign icmp_ln1496_3_fu_875_p2 = (($signed(icmp_ln1496_3_fu_875_p0) < $signed(icmp_ln1496_3_fu_875_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_889_p0 = data_V_data_6_V_dout;

assign icmp_ln1496_4_fu_889_p1 = data_V_data_7_V_dout;

assign icmp_ln1496_4_fu_889_p2 = (($signed(icmp_ln1496_4_fu_889_p0) < $signed(icmp_ln1496_4_fu_889_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_903_p2 = (($signed(select_ln86_3_fu_881_p3) < $signed(select_ln86_4_fu_895_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_917_p2 = (($signed(select_ln86_2_fu_867_p3) < $signed(select_ln86_5_fu_909_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_931_p2 = (($signed(data_array_8_V_reg_2170) < $signed(data_array_9_V_reg_2177)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_941_p2 = (($signed(select_ln86_6_reg_2184) < $signed(select_ln86_7_fu_935_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_833_p0 = data_V_data_0_V_dout;

assign icmp_ln1496_fu_833_p1 = data_V_data_1_V_dout;

assign icmp_ln1496_fu_833_p2 = (($signed(icmp_ln1496_fu_833_p0) < $signed(icmp_ln1496_fu_833_p1)) ? 1'b1 : 1'b0);

assign invert_table2_address0 = zext_ln238_fu_1961_p1;

assign io_acc_block_signal_op5 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign mul_ln1118_1_fu_429_p0 = sext_ln242_fu_1966_p1;

assign mul_ln1118_1_fu_429_p1 = exp_res_1_V_reg_2245;

assign mul_ln1118_1_fu_429_p2 = ($signed(mul_ln1118_1_fu_429_p0) * $signed(mul_ln1118_1_fu_429_p1));

assign mul_ln1118_2_fu_423_p0 = sext_ln242_fu_1966_p1;

assign mul_ln1118_2_fu_423_p1 = exp_res_2_V_reg_2250;

assign mul_ln1118_2_fu_423_p2 = ($signed(mul_ln1118_2_fu_423_p0) * $signed(mul_ln1118_2_fu_423_p1));

assign mul_ln1118_3_fu_426_p0 = sext_ln242_fu_1966_p1;

assign mul_ln1118_3_fu_426_p1 = exp_res_3_V_reg_2255;

assign mul_ln1118_3_fu_426_p2 = ($signed(mul_ln1118_3_fu_426_p0) * $signed(mul_ln1118_3_fu_426_p1));

assign mul_ln1118_4_fu_424_p0 = sext_ln242_fu_1966_p1;

assign mul_ln1118_4_fu_424_p1 = exp_res_4_V_reg_2260;

assign mul_ln1118_4_fu_424_p2 = ($signed(mul_ln1118_4_fu_424_p0) * $signed(mul_ln1118_4_fu_424_p1));

assign mul_ln1118_5_fu_428_p0 = sext_ln242_fu_1966_p1;

assign mul_ln1118_5_fu_428_p1 = exp_res_5_V_reg_2265;

assign mul_ln1118_5_fu_428_p2 = ($signed(mul_ln1118_5_fu_428_p0) * $signed(mul_ln1118_5_fu_428_p1));

assign mul_ln1118_6_fu_425_p0 = sext_ln242_fu_1966_p1;

assign mul_ln1118_6_fu_425_p1 = exp_res_6_V_reg_2270;

assign mul_ln1118_6_fu_425_p2 = ($signed(mul_ln1118_6_fu_425_p0) * $signed(mul_ln1118_6_fu_425_p1));

assign mul_ln1118_7_fu_427_p0 = sext_ln242_fu_1966_p1;

assign mul_ln1118_7_fu_427_p1 = exp_res_7_V_reg_2275;

assign mul_ln1118_7_fu_427_p2 = ($signed(mul_ln1118_7_fu_427_p0) * $signed(mul_ln1118_7_fu_427_p1));

assign mul_ln1118_8_fu_430_p0 = sext_ln242_fu_1966_p1;

assign mul_ln1118_8_fu_430_p1 = exp_res_8_V_reg_2280;

assign mul_ln1118_8_fu_430_p2 = ($signed(mul_ln1118_8_fu_430_p0) * $signed(mul_ln1118_8_fu_430_p1));

assign mul_ln1118_9_fu_431_p0 = sext_ln242_fu_1966_p1;

assign mul_ln1118_9_fu_431_p1 = exp_res_9_V_reg_2285;

assign mul_ln1118_9_fu_431_p2 = ($signed(mul_ln1118_9_fu_431_p0) * $signed(mul_ln1118_9_fu_431_p1));

assign mul_ln1118_fu_422_p0 = sext_ln242_fu_1966_p1;

assign mul_ln1118_fu_422_p1 = exp_res_0_V_reg_2240;

assign mul_ln1118_fu_422_p2 = ($signed(mul_ln1118_fu_422_p0) * $signed(mul_ln1118_fu_422_p1));

assign or_ln340_1_fu_1061_p2 = (xor_ln340_1_fu_1055_p2 | tmp_23_fu_1029_p3);

assign or_ln340_2_fu_1116_p2 = (xor_ln340_2_fu_1110_p2 | tmp_25_fu_1084_p3);

assign or_ln340_3_fu_1171_p2 = (xor_ln340_3_fu_1165_p2 | tmp_27_fu_1139_p3);

assign or_ln340_4_fu_1226_p2 = (xor_ln340_4_fu_1220_p2 | tmp_29_fu_1194_p3);

assign or_ln340_5_fu_1281_p2 = (xor_ln340_5_fu_1275_p2 | tmp_31_fu_1249_p3);

assign or_ln340_6_fu_1336_p2 = (xor_ln340_6_fu_1330_p2 | tmp_33_fu_1304_p3);

assign or_ln340_7_fu_1391_p2 = (xor_ln340_7_fu_1385_p2 | tmp_35_fu_1359_p3);

assign or_ln340_8_fu_1446_p2 = (xor_ln340_8_fu_1440_p2 | tmp_37_fu_1414_p3);

assign or_ln340_9_fu_1501_p2 = (xor_ln340_9_fu_1495_p2 | tmp_39_fu_1469_p3);

assign or_ln340_fu_1006_p2 = (xor_ln340_fu_1000_p2 | tmp_21_fu_974_p3);

assign res_V_data_0_V_TDATA = {{mul_ln1118_fu_422_p2[25:10]}};

assign res_V_data_1_V_TDATA = {{mul_ln1118_1_fu_429_p2[25:10]}};

assign res_V_data_2_V_TDATA = {{mul_ln1118_2_fu_423_p2[25:10]}};

assign res_V_data_3_V_TDATA = {{mul_ln1118_3_fu_426_p2[25:10]}};

assign res_V_data_4_V_TDATA = {{mul_ln1118_4_fu_424_p2[25:10]}};

assign res_V_data_5_V_TDATA = {{mul_ln1118_5_fu_428_p2[25:10]}};

assign res_V_data_6_V_TDATA = {{mul_ln1118_6_fu_425_p2[25:10]}};

assign res_V_data_7_V_TDATA = {{mul_ln1118_7_fu_427_p2[25:10]}};

assign res_V_data_8_V_TDATA = {{mul_ln1118_8_fu_430_p2[25:10]}};

assign res_V_data_9_V_TDATA = {{mul_ln1118_9_fu_431_p2[25:10]}};

assign select_ln340_10_fu_1712_p3 = ((xor_ln340_15_fu_1269_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1702_p4);

assign select_ln340_12_fu_1751_p3 = ((xor_ln340_16_fu_1324_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1741_p4);

assign select_ln340_14_fu_1790_p3 = ((xor_ln340_17_fu_1379_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1780_p4);

assign select_ln340_16_fu_1829_p3 = ((xor_ln340_18_fu_1434_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1819_p4);

assign select_ln340_18_fu_1868_p3 = ((xor_ln340_19_fu_1489_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_1858_p4);

assign select_ln340_2_fu_1556_p3 = ((xor_ln340_11_fu_1049_p2[0:0] === 1'b1) ? 10'd511 : tmp_12_fu_1546_p4);

assign select_ln340_4_fu_1595_p3 = ((xor_ln340_12_fu_1104_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1585_p4);

assign select_ln340_6_fu_1634_p3 = ((xor_ln340_13_fu_1159_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1624_p4);

assign select_ln340_8_fu_1673_p3 = ((xor_ln340_14_fu_1214_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1663_p4);

assign select_ln340_fu_1517_p3 = ((xor_ln340_10_fu_994_p2[0:0] === 1'b1) ? 10'd511 : tmp_11_fu_1507_p4);

assign select_ln388_1_fu_1564_p3 = ((and_ln786_1_fu_1043_p2[0:0] === 1'b1) ? 10'd512 : tmp_12_fu_1546_p4);

assign select_ln388_2_fu_1603_p3 = ((and_ln786_2_fu_1098_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1585_p4);

assign select_ln388_3_fu_1642_p3 = ((and_ln786_3_fu_1153_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1624_p4);

assign select_ln388_4_fu_1681_p3 = ((and_ln786_4_fu_1208_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1663_p4);

assign select_ln388_5_fu_1720_p3 = ((and_ln786_5_fu_1263_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1702_p4);

assign select_ln388_6_fu_1759_p3 = ((and_ln786_6_fu_1318_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1741_p4);

assign select_ln388_7_fu_1798_p3 = ((and_ln786_7_fu_1373_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1780_p4);

assign select_ln388_8_fu_1837_p3 = ((and_ln786_8_fu_1428_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1819_p4);

assign select_ln388_9_fu_1876_p3 = ((and_ln786_9_fu_1483_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_1858_p4);

assign select_ln388_fu_1525_p3 = ((and_ln786_fu_988_p2[0:0] === 1'b1) ? 10'd512 : tmp_11_fu_1507_p4);

assign select_ln86_1_fu_853_p1 = data_V_data_3_V_dout;

assign select_ln86_1_fu_853_p2 = data_V_data_2_V_dout;

assign select_ln86_1_fu_853_p3 = ((icmp_ln1496_1_fu_847_p2[0:0] === 1'b1) ? select_ln86_1_fu_853_p1 : select_ln86_1_fu_853_p2);

assign select_ln86_2_fu_867_p3 = ((icmp_ln1496_2_fu_861_p2[0:0] === 1'b1) ? select_ln86_1_fu_853_p3 : select_ln86_fu_839_p3);

assign select_ln86_3_fu_881_p1 = data_V_data_5_V_dout;

assign select_ln86_3_fu_881_p2 = data_V_data_4_V_dout;

assign select_ln86_3_fu_881_p3 = ((icmp_ln1496_3_fu_875_p2[0:0] === 1'b1) ? select_ln86_3_fu_881_p1 : select_ln86_3_fu_881_p2);

assign select_ln86_4_fu_895_p1 = data_V_data_7_V_dout;

assign select_ln86_4_fu_895_p2 = data_V_data_6_V_dout;

assign select_ln86_4_fu_895_p3 = ((icmp_ln1496_4_fu_889_p2[0:0] === 1'b1) ? select_ln86_4_fu_895_p1 : select_ln86_4_fu_895_p2);

assign select_ln86_5_fu_909_p3 = ((icmp_ln1496_5_fu_903_p2[0:0] === 1'b1) ? select_ln86_4_fu_895_p3 : select_ln86_3_fu_881_p3);

assign select_ln86_6_fu_923_p3 = ((icmp_ln1496_6_fu_917_p2[0:0] === 1'b1) ? select_ln86_5_fu_909_p3 : select_ln86_2_fu_867_p3);

assign select_ln86_7_fu_935_p3 = ((icmp_ln1496_7_fu_931_p2[0:0] === 1'b1) ? data_array_9_V_reg_2177 : data_array_8_V_reg_2170);

assign select_ln86_fu_839_p1 = data_V_data_1_V_dout;

assign select_ln86_fu_839_p2 = data_V_data_0_V_dout;

assign select_ln86_fu_839_p3 = ((icmp_ln1496_fu_833_p2[0:0] === 1'b1) ? select_ln86_fu_839_p1 : select_ln86_fu_839_p2);

assign sext_ln242_fu_1966_p1 = $signed(invert_table2_q0);

assign sext_ln703_10_fu_1452_p1 = data_array_9_V_reg_2177;

assign sext_ln703_1_fu_956_p1 = $signed(x_max_V_fu_946_p3);

assign sext_ln703_2_fu_1012_p1 = data_array_1_V_reg_2135;

assign sext_ln703_3_fu_1067_p1 = data_array_2_V_reg_2140;

assign sext_ln703_4_fu_1122_p1 = data_array_3_V_reg_2145;

assign sext_ln703_5_fu_1177_p1 = data_array_4_V_reg_2150;

assign sext_ln703_6_fu_1232_p1 = data_array_5_V_reg_2155;

assign sext_ln703_7_fu_1287_p1 = data_array_6_V_reg_2160;

assign sext_ln703_8_fu_1342_p1 = data_array_7_V_reg_2165;

assign sext_ln703_9_fu_1397_p1 = data_array_8_V_reg_2170;

assign sext_ln703_fu_953_p1 = data_array_0_V_reg_2130;

assign sub_ln1193_1_fu_1015_p2 = ($signed(sext_ln703_2_fu_1012_p1) - $signed(sext_ln703_1_fu_956_p1));

assign sub_ln1193_2_fu_1070_p2 = ($signed(sext_ln703_3_fu_1067_p1) - $signed(sext_ln703_1_fu_956_p1));

assign sub_ln1193_3_fu_1125_p2 = ($signed(sext_ln703_4_fu_1122_p1) - $signed(sext_ln703_1_fu_956_p1));

assign sub_ln1193_4_fu_1180_p2 = ($signed(sext_ln703_5_fu_1177_p1) - $signed(sext_ln703_1_fu_956_p1));

assign sub_ln1193_5_fu_1235_p2 = ($signed(sext_ln703_6_fu_1232_p1) - $signed(sext_ln703_1_fu_956_p1));

assign sub_ln1193_6_fu_1290_p2 = ($signed(sext_ln703_7_fu_1287_p1) - $signed(sext_ln703_1_fu_956_p1));

assign sub_ln1193_7_fu_1345_p2 = ($signed(sext_ln703_8_fu_1342_p1) - $signed(sext_ln703_1_fu_956_p1));

assign sub_ln1193_8_fu_1400_p2 = ($signed(sext_ln703_9_fu_1397_p1) - $signed(sext_ln703_1_fu_956_p1));

assign sub_ln1193_9_fu_1455_p2 = ($signed(sext_ln703_10_fu_1452_p1) - $signed(sext_ln703_1_fu_956_p1));

assign sub_ln1193_fu_960_p2 = ($signed(sext_ln703_fu_953_p1) - $signed(sext_ln703_1_fu_956_p1));

assign tmp_11_fu_1507_p4 = {{sub_ln1193_fu_960_p2[15:6]}};

assign tmp_12_fu_1546_p4 = {{sub_ln1193_1_fu_1015_p2[15:6]}};

assign tmp_13_fu_1585_p4 = {{sub_ln1193_2_fu_1070_p2[15:6]}};

assign tmp_14_fu_1624_p4 = {{sub_ln1193_3_fu_1125_p2[15:6]}};

assign tmp_15_fu_1663_p4 = {{sub_ln1193_4_fu_1180_p2[15:6]}};

assign tmp_16_fu_1702_p4 = {{sub_ln1193_5_fu_1235_p2[15:6]}};

assign tmp_17_fu_1741_p4 = {{sub_ln1193_6_fu_1290_p2[15:6]}};

assign tmp_18_fu_1780_p4 = {{sub_ln1193_7_fu_1345_p2[15:6]}};

assign tmp_19_fu_1819_p4 = {{sub_ln1193_8_fu_1400_p2[15:6]}};

assign tmp_20_fu_1858_p4 = {{sub_ln1193_9_fu_1455_p2[15:6]}};

assign tmp_21_fu_974_p3 = sub_ln1193_fu_960_p2[32'd15];

assign tmp_22_fu_1021_p3 = sub_ln1193_1_fu_1015_p2[32'd16];

assign tmp_23_fu_1029_p3 = sub_ln1193_1_fu_1015_p2[32'd15];

assign tmp_24_fu_1076_p3 = sub_ln1193_2_fu_1070_p2[32'd16];

assign tmp_25_fu_1084_p3 = sub_ln1193_2_fu_1070_p2[32'd15];

assign tmp_26_fu_1131_p3 = sub_ln1193_3_fu_1125_p2[32'd16];

assign tmp_27_fu_1139_p3 = sub_ln1193_3_fu_1125_p2[32'd15];

assign tmp_28_fu_1186_p3 = sub_ln1193_4_fu_1180_p2[32'd16];

assign tmp_29_fu_1194_p3 = sub_ln1193_4_fu_1180_p2[32'd15];

assign tmp_30_fu_1241_p3 = sub_ln1193_5_fu_1235_p2[32'd16];

assign tmp_31_fu_1249_p3 = sub_ln1193_5_fu_1235_p2[32'd15];

assign tmp_32_fu_1296_p3 = sub_ln1193_6_fu_1290_p2[32'd16];

assign tmp_33_fu_1304_p3 = sub_ln1193_6_fu_1290_p2[32'd15];

assign tmp_34_fu_1351_p3 = sub_ln1193_7_fu_1345_p2[32'd16];

assign tmp_35_fu_1359_p3 = sub_ln1193_7_fu_1345_p2[32'd15];

assign tmp_36_fu_1406_p3 = sub_ln1193_8_fu_1400_p2[32'd16];

assign tmp_37_fu_1414_p3 = sub_ln1193_8_fu_1400_p2[32'd15];

assign tmp_38_fu_1461_p3 = sub_ln1193_9_fu_1455_p2[32'd16];

assign tmp_39_fu_1469_p3 = sub_ln1193_9_fu_1455_p2[32'd15];

assign tmp_fu_966_p3 = sub_ln1193_fu_960_p2[32'd16];

assign x_max_V_fu_946_p3 = ((icmp_ln1496_8_fu_941_p2[0:0] === 1'b1) ? select_ln86_7_fu_935_p3 : select_ln86_6_reg_2184);

assign xor_ln340_10_fu_994_p2 = (tmp_fu_966_p3 ^ tmp_21_fu_974_p3);

assign xor_ln340_11_fu_1049_p2 = (tmp_23_fu_1029_p3 ^ tmp_22_fu_1021_p3);

assign xor_ln340_12_fu_1104_p2 = (tmp_25_fu_1084_p3 ^ tmp_24_fu_1076_p3);

assign xor_ln340_13_fu_1159_p2 = (tmp_27_fu_1139_p3 ^ tmp_26_fu_1131_p3);

assign xor_ln340_14_fu_1214_p2 = (tmp_29_fu_1194_p3 ^ tmp_28_fu_1186_p3);

assign xor_ln340_15_fu_1269_p2 = (tmp_31_fu_1249_p3 ^ tmp_30_fu_1241_p3);

assign xor_ln340_16_fu_1324_p2 = (tmp_33_fu_1304_p3 ^ tmp_32_fu_1296_p3);

assign xor_ln340_17_fu_1379_p2 = (tmp_35_fu_1359_p3 ^ tmp_34_fu_1351_p3);

assign xor_ln340_18_fu_1434_p2 = (tmp_37_fu_1414_p3 ^ tmp_36_fu_1406_p3);

assign xor_ln340_19_fu_1489_p2 = (tmp_39_fu_1469_p3 ^ tmp_38_fu_1461_p3);

assign xor_ln340_1_fu_1055_p2 = (tmp_22_fu_1021_p3 ^ 1'd1);

assign xor_ln340_2_fu_1110_p2 = (tmp_24_fu_1076_p3 ^ 1'd1);

assign xor_ln340_3_fu_1165_p2 = (tmp_26_fu_1131_p3 ^ 1'd1);

assign xor_ln340_4_fu_1220_p2 = (tmp_28_fu_1186_p3 ^ 1'd1);

assign xor_ln340_5_fu_1275_p2 = (tmp_30_fu_1241_p3 ^ 1'd1);

assign xor_ln340_6_fu_1330_p2 = (tmp_32_fu_1296_p3 ^ 1'd1);

assign xor_ln340_7_fu_1385_p2 = (tmp_34_fu_1351_p3 ^ 1'd1);

assign xor_ln340_8_fu_1440_p2 = (tmp_36_fu_1406_p3 ^ 1'd1);

assign xor_ln340_9_fu_1495_p2 = (tmp_38_fu_1461_p3 ^ 1'd1);

assign xor_ln340_fu_1000_p2 = (tmp_fu_966_p3 ^ 1'd1);

assign xor_ln786_1_fu_1037_p2 = (tmp_23_fu_1029_p3 ^ 1'd1);

assign xor_ln786_2_fu_1092_p2 = (tmp_25_fu_1084_p3 ^ 1'd1);

assign xor_ln786_3_fu_1147_p2 = (tmp_27_fu_1139_p3 ^ 1'd1);

assign xor_ln786_4_fu_1202_p2 = (tmp_29_fu_1194_p3 ^ 1'd1);

assign xor_ln786_5_fu_1257_p2 = (tmp_31_fu_1249_p3 ^ 1'd1);

assign xor_ln786_6_fu_1312_p2 = (tmp_33_fu_1304_p3 ^ 1'd1);

assign xor_ln786_7_fu_1367_p2 = (tmp_35_fu_1359_p3 ^ 1'd1);

assign xor_ln786_8_fu_1422_p2 = (tmp_37_fu_1414_p3 ^ 1'd1);

assign xor_ln786_9_fu_1477_p2 = (tmp_39_fu_1469_p3 ^ 1'd1);

assign xor_ln786_fu_982_p2 = (tmp_21_fu_974_p3 ^ 1'd1);

assign y_V_10_fu_1951_p4 = {{exp_sum_V_fu_1945_p2[17:8]}};

assign y_V_1_fu_1572_p3 = ((or_ln340_1_fu_1061_p2[0:0] === 1'b1) ? select_ln340_2_fu_1556_p3 : select_ln388_1_fu_1564_p3);

assign y_V_2_fu_1611_p3 = ((or_ln340_2_fu_1116_p2[0:0] === 1'b1) ? select_ln340_4_fu_1595_p3 : select_ln388_2_fu_1603_p3);

assign y_V_3_fu_1650_p3 = ((or_ln340_3_fu_1171_p2[0:0] === 1'b1) ? select_ln340_6_fu_1634_p3 : select_ln388_3_fu_1642_p3);

assign y_V_4_fu_1689_p3 = ((or_ln340_4_fu_1226_p2[0:0] === 1'b1) ? select_ln340_8_fu_1673_p3 : select_ln388_4_fu_1681_p3);

assign y_V_5_fu_1728_p3 = ((or_ln340_5_fu_1281_p2[0:0] === 1'b1) ? select_ln340_10_fu_1712_p3 : select_ln388_5_fu_1720_p3);

assign y_V_6_fu_1767_p3 = ((or_ln340_6_fu_1336_p2[0:0] === 1'b1) ? select_ln340_12_fu_1751_p3 : select_ln388_6_fu_1759_p3);

assign y_V_7_fu_1806_p3 = ((or_ln340_7_fu_1391_p2[0:0] === 1'b1) ? select_ln340_14_fu_1790_p3 : select_ln388_7_fu_1798_p3);

assign y_V_8_fu_1845_p3 = ((or_ln340_8_fu_1446_p2[0:0] === 1'b1) ? select_ln340_16_fu_1829_p3 : select_ln388_8_fu_1837_p3);

assign y_V_9_fu_1884_p3 = ((or_ln340_9_fu_1501_p2[0:0] === 1'b1) ? select_ln340_18_fu_1868_p3 : select_ln388_9_fu_1876_p3);

assign y_V_fu_1533_p3 = ((or_ln340_fu_1006_p2[0:0] === 1'b1) ? select_ln340_fu_1517_p3 : select_ln388_fu_1525_p3);

assign zext_ln230_1_fu_1580_p1 = y_V_1_fu_1572_p3;

assign zext_ln230_2_fu_1619_p1 = y_V_2_fu_1611_p3;

assign zext_ln230_3_fu_1658_p1 = y_V_3_fu_1650_p3;

assign zext_ln230_4_fu_1697_p1 = y_V_4_fu_1689_p3;

assign zext_ln230_5_fu_1736_p1 = y_V_5_fu_1728_p3;

assign zext_ln230_6_fu_1775_p1 = y_V_6_fu_1767_p3;

assign zext_ln230_7_fu_1814_p1 = y_V_7_fu_1806_p3;

assign zext_ln230_8_fu_1853_p1 = y_V_8_fu_1845_p3;

assign zext_ln230_9_fu_1892_p1 = y_V_9_fu_1884_p3;

assign zext_ln230_fu_1541_p1 = y_V_fu_1533_p3;

assign zext_ln238_fu_1961_p1 = y_V_10_fu_1951_p4;

endmodule //softmax_stable_array_array_ap_fixed_10u_softmax_config6_s
