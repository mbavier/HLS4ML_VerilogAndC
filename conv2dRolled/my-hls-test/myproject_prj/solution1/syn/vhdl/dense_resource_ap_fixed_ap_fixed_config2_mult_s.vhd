-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_resource_ap_fixed_ap_fixed_config2_mult_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of dense_resource_ap_fixed_ap_fixed_config2_mult_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_8A : STD_LOGIC_VECTOR (15 downto 0) := "0000000010001010";
    constant ap_const_lv16_FD44 : STD_LOGIC_VECTOR (15 downto 0) := "1111110101000100";
    constant ap_const_lv25_1FFFF37 : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111100110111";
    constant ap_const_lv26_3FFFEE4 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111011100100";
    constant ap_const_lv23_3B : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000111011";
    constant ap_const_lv24_FFFFAF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110101111";
    constant ap_const_lv26_129 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100101001";
    constant ap_const_lv25_BD : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010111101";
    constant ap_const_lv26_3FFFE96 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111010010110";
    constant ap_const_lv25_CA : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000011001010";
    constant ap_const_lv25_9C : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010011100";
    constant ap_const_lv24_45 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000101";
    constant ap_const_lv25_1FFFF7D : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111101111101";
    constant ap_const_lv24_FFFFB3 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110110011";
    constant ap_const_lv24_7D : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001111101";
    constant ap_const_lv26_18F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000110001111";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal trunc_ln_reg_730 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln708_1_reg_735 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1286_fu_398_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_1286_reg_740 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_1288_fu_404_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1288_reg_745 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1290_fu_416_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1290_reg_750 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1296_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1296_reg_755 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1297_fu_555_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_1297_reg_760 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_1299_fu_567_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1299_reg_765 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln1118_fu_625_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1118_981_fu_632_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln_fu_188_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_188_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1118_s_fu_200_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1118_s_fu_200_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_854_fu_196_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_855_fu_208_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1118_fu_212_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_497_fu_218_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1118_982_fu_639_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_498_fu_240_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_983_fu_646_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_499_fu_261_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_984_fu_653_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_863_fu_295_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_299_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_299_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_863_fu_295_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_868_fu_307_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1118_268_fu_311_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln708_s_fu_317_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln1118_348_fu_335_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1118_348_fu_335_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln1118_349_fu_347_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1118_349_fu_347_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1118_865_fu_343_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln1118_866_fu_355_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sub_ln1118_fu_359_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_985_fu_660_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_793_fu_379_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln216_45_fu_270_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln216_44_fu_249_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln216_fu_228_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_1285_fu_392_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln708_782_fu_327_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_5_fu_282_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_783_fu_388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_7_fu_365_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1289_fu_410_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_986_fu_667_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_987_fu_674_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_794_fu_431_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1118_988_fu_681_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_795_fu_444_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1118_989_fu_688_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_796_fu_457_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_990_fu_695_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_797_fu_470_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1118_991_fu_702_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_500_fu_483_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_992_fu_709_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_501_fu_496_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1118_993_fu_716_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_994_fu_723_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln708_798_fu_518_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln708_784_fu_440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_9_fu_422_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_787_fu_479_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_786_fu_466_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_785_fu_453_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1294_fu_537_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1293_fu_531_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1295_fu_543_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln216_47_fu_505_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln216_46_fu_492_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln708_788_fu_527_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_16_fu_509_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1298_fu_561_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_fu_573_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_fu_576_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_fu_581_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1287_fu_584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1291_fu_590_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln703_257_fu_600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1300_fu_603_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1292_fu_594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_1_V_fu_608_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_625_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_981_fu_632_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_982_fu_639_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln1118_983_fu_646_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_984_fu_653_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_985_fu_660_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_867_fu_375_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1118_985_fu_660_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_986_fu_667_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_987_fu_674_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_988_fu_681_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_989_fu_688_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_990_fu_695_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_991_fu_702_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_992_fu_709_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_993_fu_716_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_994_fu_723_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_994_fu_723_p1 : STD_LOGIC_VECTOR (8 downto 0);

    component myproject_mul_mul_16s_9s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_mul_mul_16s_10s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_mul_16s_7ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component myproject_mul_mul_16s_8s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_16s_10ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_mul_mul_16s_9ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component myproject_mul_mul_16s_8ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    myproject_mul_mul_16s_9s_25_1_1_U4 : component myproject_mul_mul_16s_9s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 25)
    port map (
        din0 => data_0_V_read,
        din1 => mul_ln1118_fu_625_p1,
        dout => mul_ln1118_fu_625_p2);

    myproject_mul_mul_16s_10s_26_1_1_U5 : component myproject_mul_mul_16s_10s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => data_1_V_read,
        din1 => mul_ln1118_981_fu_632_p1,
        dout => mul_ln1118_981_fu_632_p2);

    myproject_mul_mul_16s_7ns_23_1_1_U6 : component myproject_mul_mul_16s_7ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        dout_WIDTH => 23)
    port map (
        din0 => data_3_V_read,
        din1 => mul_ln1118_982_fu_639_p1,
        dout => mul_ln1118_982_fu_639_p2);

    myproject_mul_mul_16s_8s_24_1_1_U7 : component myproject_mul_mul_16s_8s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => data_4_V_read,
        din1 => mul_ln1118_983_fu_646_p1,
        dout => mul_ln1118_983_fu_646_p2);

    myproject_mul_mul_16s_10ns_26_1_1_U8 : component myproject_mul_mul_16s_10ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => data_5_V_read,
        din1 => mul_ln1118_984_fu_653_p1,
        dout => mul_ln1118_984_fu_653_p2);

    myproject_mul_mul_16s_9ns_25_1_1_U9 : component myproject_mul_mul_16s_9ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln1118_985_fu_660_p0,
        din1 => mul_ln1118_985_fu_660_p1,
        dout => mul_ln1118_985_fu_660_p2);

    myproject_mul_mul_16s_10s_26_1_1_U10 : component myproject_mul_mul_16s_10s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => data_0_V_read,
        din1 => mul_ln1118_986_fu_667_p1,
        dout => mul_ln1118_986_fu_667_p2);

    myproject_mul_mul_16s_9ns_25_1_1_U11 : component myproject_mul_mul_16s_9ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 25)
    port map (
        din0 => data_1_V_read,
        din1 => mul_ln1118_987_fu_674_p1,
        dout => mul_ln1118_987_fu_674_p2);

    myproject_mul_mul_16s_9ns_25_1_1_U12 : component myproject_mul_mul_16s_9ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 25)
    port map (
        din0 => data_2_V_read,
        din1 => mul_ln1118_988_fu_681_p1,
        dout => mul_ln1118_988_fu_681_p2);

    myproject_mul_mul_16s_8ns_24_1_1_U13 : component myproject_mul_mul_16s_8ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => data_3_V_read,
        din1 => mul_ln1118_989_fu_688_p1,
        dout => mul_ln1118_989_fu_688_p2);

    myproject_mul_mul_16s_9s_25_1_1_U14 : component myproject_mul_mul_16s_9s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 25)
    port map (
        din0 => data_4_V_read,
        din1 => mul_ln1118_990_fu_695_p1,
        dout => mul_ln1118_990_fu_695_p2);

    myproject_mul_mul_16s_8s_24_1_1_U15 : component myproject_mul_mul_16s_8s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => data_5_V_read,
        din1 => mul_ln1118_991_fu_702_p1,
        dout => mul_ln1118_991_fu_702_p2);

    myproject_mul_mul_16s_8ns_24_1_1_U16 : component myproject_mul_mul_16s_8ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => data_6_V_read,
        din1 => mul_ln1118_992_fu_709_p1,
        dout => mul_ln1118_992_fu_709_p2);

    myproject_mul_mul_16s_10ns_26_1_1_U17 : component myproject_mul_mul_16s_10ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => data_7_V_read,
        din1 => mul_ln1118_993_fu_716_p1,
        dout => mul_ln1118_993_fu_716_p2);

    myproject_mul_mul_16s_9ns_25_1_1_U18 : component myproject_mul_mul_16s_9ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln1118_994_fu_723_p0,
        din1 => mul_ln1118_994_fu_723_p1,
        dout => mul_ln1118_994_fu_723_p2);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                add_ln703_1286_reg_740 <= add_ln703_1286_fu_398_p2;
                add_ln703_1288_reg_745 <= add_ln703_1288_fu_404_p2;
                add_ln703_1290_reg_750 <= add_ln703_1290_fu_416_p2;
                add_ln703_1296_reg_755 <= add_ln703_1296_fu_549_p2;
                add_ln703_1297_reg_760 <= add_ln703_1297_fu_555_p2;
                add_ln703_1299_reg_765 <= add_ln703_1299_fu_567_p2;
                trunc_ln708_1_reg_735 <= mul_ln1118_981_fu_632_p2(25 downto 10);
                trunc_ln_reg_730 <= mul_ln1118_fu_625_p2(24 downto 10);
            end if;
        end if;
    end process;
    acc_1_V_fu_608_p2 <= std_logic_vector(unsigned(add_ln703_1296_reg_755) + unsigned(add_ln703_1300_fu_603_p2));
    add_ln1118_fu_212_p2 <= std_logic_vector(signed(sext_ln1118_854_fu_196_p1) + signed(sext_ln1118_855_fu_208_p1));
    add_ln703_1285_fu_392_p2 <= std_logic_vector(signed(sext_ln216_45_fu_270_p1) + signed(sext_ln216_44_fu_249_p1));
    add_ln703_1286_fu_398_p2 <= std_logic_vector(signed(sext_ln216_fu_228_p1) + signed(add_ln703_1285_fu_392_p2));
    add_ln703_1287_fu_584_p2 <= std_logic_vector(unsigned(add_ln703_fu_576_p2) + unsigned(sext_ln703_fu_581_p1));
    add_ln703_1288_fu_404_p2 <= std_logic_vector(signed(sext_ln708_782_fu_327_p1) + signed(trunc_ln708_5_fu_282_p4));
    add_ln703_1289_fu_410_p2 <= std_logic_vector(signed(sext_ln708_783_fu_388_p1) + signed(ap_const_lv16_8A));
    add_ln703_1290_fu_416_p2 <= std_logic_vector(unsigned(trunc_ln708_7_fu_365_p4) + unsigned(add_ln703_1289_fu_410_p2));
    add_ln703_1291_fu_590_p2 <= std_logic_vector(unsigned(add_ln703_1288_reg_745) + unsigned(add_ln703_1290_reg_750));
    add_ln703_1292_fu_594_p2 <= std_logic_vector(unsigned(add_ln703_1287_fu_584_p2) + unsigned(add_ln703_1291_fu_590_p2));
    add_ln703_1293_fu_531_p2 <= std_logic_vector(signed(sext_ln708_784_fu_440_p1) + signed(trunc_ln708_9_fu_422_p4));
    add_ln703_1294_fu_537_p2 <= std_logic_vector(signed(sext_ln708_787_fu_479_p1) + signed(sext_ln708_786_fu_466_p1));
    add_ln703_1295_fu_543_p2 <= std_logic_vector(signed(sext_ln708_785_fu_453_p1) + signed(add_ln703_1294_fu_537_p2));
    add_ln703_1296_fu_549_p2 <= std_logic_vector(unsigned(add_ln703_1293_fu_531_p2) + unsigned(add_ln703_1295_fu_543_p2));
    add_ln703_1297_fu_555_p2 <= std_logic_vector(signed(sext_ln216_47_fu_505_p1) + signed(sext_ln216_46_fu_492_p1));
    add_ln703_1298_fu_561_p2 <= std_logic_vector(signed(sext_ln708_788_fu_527_p1) + signed(ap_const_lv16_FD44));
    add_ln703_1299_fu_567_p2 <= std_logic_vector(unsigned(trunc_ln708_16_fu_509_p4) + unsigned(add_ln703_1298_fu_561_p2));
    add_ln703_1300_fu_603_p2 <= std_logic_vector(signed(sext_ln703_257_fu_600_p1) + signed(add_ln703_1299_reg_765));
    add_ln703_fu_576_p2 <= std_logic_vector(unsigned(trunc_ln708_1_reg_735) + unsigned(sext_ln708_fu_573_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return_0 <= add_ln703_1292_fu_594_p2;
    ap_return_1 <= acc_1_V_fu_608_p2;
    mul_ln1118_981_fu_632_p1 <= ap_const_lv26_3FFFEE4(10 - 1 downto 0);
    mul_ln1118_982_fu_639_p1 <= ap_const_lv23_3B(7 - 1 downto 0);
    mul_ln1118_983_fu_646_p1 <= ap_const_lv24_FFFFAF(8 - 1 downto 0);
    mul_ln1118_984_fu_653_p1 <= ap_const_lv26_129(10 - 1 downto 0);
    mul_ln1118_985_fu_660_p0 <= sext_ln1118_867_fu_375_p1(16 - 1 downto 0);
    mul_ln1118_985_fu_660_p1 <= ap_const_lv25_BD(9 - 1 downto 0);
    mul_ln1118_986_fu_667_p1 <= ap_const_lv26_3FFFE96(10 - 1 downto 0);
    mul_ln1118_987_fu_674_p1 <= ap_const_lv25_CA(9 - 1 downto 0);
    mul_ln1118_988_fu_681_p1 <= ap_const_lv25_9C(9 - 1 downto 0);
    mul_ln1118_989_fu_688_p1 <= ap_const_lv24_45(8 - 1 downto 0);
    mul_ln1118_990_fu_695_p1 <= ap_const_lv25_1FFFF7D(9 - 1 downto 0);
    mul_ln1118_991_fu_702_p1 <= ap_const_lv24_FFFFB3(8 - 1 downto 0);
    mul_ln1118_992_fu_709_p1 <= ap_const_lv24_7D(8 - 1 downto 0);
    mul_ln1118_993_fu_716_p1 <= ap_const_lv26_18F(10 - 1 downto 0);
    mul_ln1118_994_fu_723_p0 <= sext_ln1118_867_fu_375_p1(16 - 1 downto 0);
    mul_ln1118_994_fu_723_p1 <= ap_const_lv25_9C(9 - 1 downto 0);
    mul_ln1118_fu_625_p1 <= ap_const_lv25_1FFFF37(9 - 1 downto 0);
        sext_ln1118_854_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_188_p3),22));

        sext_ln1118_855_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_s_fu_200_p3),22));

    sext_ln1118_863_fu_295_p0 <= data_6_V_read;
        sext_ln1118_863_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_863_fu_295_p0),20));

        sext_ln1118_865_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_348_fu_335_p3),26));

        sext_ln1118_866_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_349_fu_347_p3),26));

        sext_ln1118_867_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_8_V_read),25));

        sext_ln1118_868_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_299_p3),20));

        sext_ln216_44_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_498_fu_240_p4),15));

        sext_ln216_45_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_499_fu_261_p4),15));

        sext_ln216_46_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_500_fu_483_p4),15));

        sext_ln216_47_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_501_fu_496_p4),15));

        sext_ln216_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_497_fu_218_p4),15));

        sext_ln703_257_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_1297_reg_760),16));

        sext_ln703_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln703_1286_reg_740),16));

        sext_ln708_782_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_fu_317_p4),16));

        sext_ln708_783_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_793_fu_379_p4),16));

        sext_ln708_784_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_794_fu_431_p4),16));

        sext_ln708_785_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_795_fu_444_p4),16));

        sext_ln708_786_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_796_fu_457_p4),16));

        sext_ln708_787_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_797_fu_470_p4),16));

        sext_ln708_788_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_798_fu_518_p4),16));

        sext_ln708_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_730),16));

    shl_ln1118_348_fu_335_p1 <= data_7_V_read;
    shl_ln1118_348_fu_335_p3 <= (shl_ln1118_348_fu_335_p1 & ap_const_lv9_0);
    shl_ln1118_349_fu_347_p1 <= data_7_V_read;
    shl_ln1118_349_fu_347_p3 <= (shl_ln1118_349_fu_347_p1 & ap_const_lv5_0);
    shl_ln1118_s_fu_200_p1 <= data_2_V_read;
    shl_ln1118_s_fu_200_p3 <= (shl_ln1118_s_fu_200_p1 & ap_const_lv1_0);
    shl_ln_fu_188_p1 <= data_2_V_read;
    shl_ln_fu_188_p3 <= (shl_ln_fu_188_p1 & ap_const_lv5_0);
    sub_ln1118_268_fu_311_p2 <= std_logic_vector(signed(sext_ln1118_863_fu_295_p1) - signed(sext_ln1118_868_fu_307_p1));
    sub_ln1118_fu_359_p2 <= std_logic_vector(signed(sext_ln1118_865_fu_343_p1) - signed(sext_ln1118_866_fu_355_p1));
    tmp_497_fu_218_p4 <= add_ln1118_fu_212_p2(21 downto 10);
    tmp_498_fu_240_p4 <= mul_ln1118_982_fu_639_p2(22 downto 10);
    tmp_499_fu_261_p4 <= mul_ln1118_983_fu_646_p2(23 downto 10);
    tmp_500_fu_483_p4 <= mul_ln1118_991_fu_702_p2(23 downto 10);
    tmp_501_fu_496_p4 <= mul_ln1118_992_fu_709_p2(23 downto 10);
    tmp_fu_299_p1 <= data_6_V_read;
    tmp_fu_299_p3 <= (tmp_fu_299_p1 & ap_const_lv3_0);
    trunc_ln708_16_fu_509_p4 <= mul_ln1118_993_fu_716_p2(25 downto 10);
    trunc_ln708_5_fu_282_p4 <= mul_ln1118_984_fu_653_p2(25 downto 10);
    trunc_ln708_793_fu_379_p4 <= mul_ln1118_985_fu_660_p2(24 downto 10);
    trunc_ln708_794_fu_431_p4 <= mul_ln1118_987_fu_674_p2(24 downto 10);
    trunc_ln708_795_fu_444_p4 <= mul_ln1118_988_fu_681_p2(24 downto 10);
    trunc_ln708_796_fu_457_p4 <= mul_ln1118_989_fu_688_p2(23 downto 10);
    trunc_ln708_797_fu_470_p4 <= mul_ln1118_990_fu_695_p2(24 downto 10);
    trunc_ln708_798_fu_518_p4 <= mul_ln1118_994_fu_723_p2(24 downto 10);
    trunc_ln708_7_fu_365_p4 <= sub_ln1118_fu_359_p2(25 downto 10);
    trunc_ln708_9_fu_422_p4 <= mul_ln1118_986_fu_667_p2(25 downto 10);
    trunc_ln708_s_fu_317_p4 <= sub_ln1118_268_fu_311_p2(19 downto 10);
end behav;
