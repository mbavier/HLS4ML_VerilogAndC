// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_latency_ap_fixed_ap_fixed_softmax_config5_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        data_5_V_read,
        data_6_V_read,
        data_7_V_read,
        data_8_V_read,
        data_9_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
input  [15:0] data_5_V_read;
input  [15:0] data_6_V_read;
input  [15:0] data_7_V_read;
input  [15:0] data_8_V_read;
input  [15:0] data_9_V_read;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [15:0] ap_return_5;
output  [15:0] ap_return_6;
output  [15:0] ap_return_7;
output  [15:0] ap_return_8;
output  [15:0] ap_return_9;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [17:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [17:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [17:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [17:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [17:0] exp_table1_q4;
wire   [9:0] exp_table1_address5;
reg    exp_table1_ce5;
wire   [17:0] exp_table1_q5;
wire   [9:0] exp_table1_address6;
reg    exp_table1_ce6;
wire   [17:0] exp_table1_q6;
wire   [9:0] exp_table1_address7;
reg    exp_table1_ce7;
wire   [17:0] exp_table1_q7;
wire   [9:0] exp_table1_address8;
reg    exp_table1_ce8;
wire   [17:0] exp_table1_q8;
wire   [9:0] exp_table1_address9;
reg    exp_table1_ce9;
wire   [17:0] exp_table1_q9;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [13:0] invert_table2_q0;
reg  signed [17:0] exp_res_0_V_reg_775;
reg  signed [17:0] exp_res_1_V_reg_780;
reg  signed [17:0] exp_res_2_V_reg_785;
reg  signed [17:0] exp_res_3_V_reg_790;
reg  signed [17:0] exp_res_4_V_reg_795;
reg  signed [17:0] exp_res_5_V_reg_800;
reg  signed [17:0] exp_res_6_V_reg_805;
reg  signed [17:0] exp_res_7_V_reg_810;
reg  signed [17:0] exp_res_8_V_reg_815;
reg  signed [17:0] exp_res_9_V_reg_820;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln251_fu_262_p1;
wire   [63:0] zext_ln251_1_fu_277_p1;
wire   [63:0] zext_ln251_2_fu_292_p1;
wire   [63:0] zext_ln251_3_fu_307_p1;
wire   [63:0] zext_ln251_4_fu_322_p1;
wire   [63:0] zext_ln251_5_fu_337_p1;
wire   [63:0] zext_ln251_6_fu_352_p1;
wire   [63:0] zext_ln251_7_fu_367_p1;
wire   [63:0] zext_ln251_8_fu_382_p1;
wire   [63:0] zext_ln251_9_fu_397_p1;
wire   [63:0] zext_ln259_fu_466_p1;
wire   [9:0] y_V_fu_252_p4;
wire   [9:0] y_V_1_fu_267_p4;
wire   [9:0] y_V_2_fu_282_p4;
wire   [9:0] y_V_3_fu_297_p4;
wire   [9:0] y_V_4_fu_312_p4;
wire   [9:0] y_V_5_fu_327_p4;
wire   [9:0] y_V_6_fu_342_p4;
wire   [9:0] y_V_7_fu_357_p4;
wire   [9:0] y_V_8_fu_372_p4;
wire   [9:0] y_V_9_fu_387_p4;
wire  signed [17:0] add_ln703_fu_402_p0;
wire  signed [17:0] add_ln703_fu_402_p1;
wire  signed [17:0] add_ln703_1_fu_408_p0;
wire  signed [17:0] add_ln703_1_fu_408_p1;
wire   [17:0] add_ln703_1_fu_408_p2;
wire  signed [17:0] add_ln703_2_fu_414_p1;
wire   [17:0] add_ln703_2_fu_414_p2;
wire   [17:0] add_ln703_fu_402_p2;
wire  signed [17:0] add_ln703_4_fu_426_p0;
wire  signed [17:0] add_ln703_4_fu_426_p1;
wire  signed [17:0] add_ln703_5_fu_432_p0;
wire  signed [17:0] add_ln703_5_fu_432_p1;
wire   [17:0] add_ln703_5_fu_432_p2;
wire  signed [17:0] add_ln703_6_fu_438_p1;
wire   [17:0] add_ln703_6_fu_438_p2;
wire   [17:0] add_ln703_4_fu_426_p2;
wire   [17:0] add_ln703_7_fu_444_p2;
wire   [17:0] add_ln703_3_fu_420_p2;
wire   [17:0] exp_sum_V_fu_450_p2;
wire   [9:0] y_V_10_fu_456_p4;
wire  signed [25:0] mul_ln1118_fu_655_p2;
wire  signed [25:0] mul_ln1118_1_fu_662_p2;
wire  signed [25:0] mul_ln1118_2_fu_669_p2;
wire  signed [25:0] mul_ln1118_3_fu_676_p2;
wire  signed [25:0] mul_ln1118_4_fu_683_p2;
wire  signed [25:0] mul_ln1118_5_fu_690_p2;
wire  signed [25:0] mul_ln1118_6_fu_697_p2;
wire  signed [25:0] mul_ln1118_7_fu_704_p2;
wire  signed [25:0] mul_ln1118_8_fu_711_p2;
wire  signed [25:0] mul_ln1118_9_fu_718_p2;
wire  signed [13:0] mul_ln1118_fu_655_p0;
wire  signed [25:0] sext_ln1116_fu_471_p1;
wire  signed [13:0] mul_ln1118_1_fu_662_p0;
wire  signed [13:0] mul_ln1118_2_fu_669_p0;
wire  signed [13:0] mul_ln1118_3_fu_676_p0;
wire  signed [13:0] mul_ln1118_4_fu_683_p0;
wire  signed [13:0] mul_ln1118_5_fu_690_p0;
wire  signed [13:0] mul_ln1118_6_fu_697_p0;
wire  signed [13:0] mul_ln1118_7_fu_704_p0;
wire  signed [13:0] mul_ln1118_8_fu_711_p0;
wire  signed [13:0] mul_ln1118_9_fu_718_p0;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

softmax_latency_ap_fixed_ap_fixed_softmax_config5_s_exp_tbkb #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4),
    .address5(exp_table1_address5),
    .ce5(exp_table1_ce5),
    .q5(exp_table1_q5),
    .address6(exp_table1_address6),
    .ce6(exp_table1_ce6),
    .q6(exp_table1_q6),
    .address7(exp_table1_address7),
    .ce7(exp_table1_ce7),
    .q7(exp_table1_q7),
    .address8(exp_table1_address8),
    .ce8(exp_table1_ce8),
    .q8(exp_table1_q8),
    .address9(exp_table1_address9),
    .ce9(exp_table1_ce9),
    .q9(exp_table1_q9)
);

softmax_latency_ap_fixed_ap_fixed_softmax_config5_s_invercud #(
    .DataWidth( 14 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_14s_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_14s_18s_26_1_1_U1260(
    .din0(mul_ln1118_fu_655_p0),
    .din1(exp_res_0_V_reg_775),
    .dout(mul_ln1118_fu_655_p2)
);

myproject_mul_mul_14s_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_14s_18s_26_1_1_U1261(
    .din0(mul_ln1118_1_fu_662_p0),
    .din1(exp_res_1_V_reg_780),
    .dout(mul_ln1118_1_fu_662_p2)
);

myproject_mul_mul_14s_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_14s_18s_26_1_1_U1262(
    .din0(mul_ln1118_2_fu_669_p0),
    .din1(exp_res_2_V_reg_785),
    .dout(mul_ln1118_2_fu_669_p2)
);

myproject_mul_mul_14s_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_14s_18s_26_1_1_U1263(
    .din0(mul_ln1118_3_fu_676_p0),
    .din1(exp_res_3_V_reg_790),
    .dout(mul_ln1118_3_fu_676_p2)
);

myproject_mul_mul_14s_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_14s_18s_26_1_1_U1264(
    .din0(mul_ln1118_4_fu_683_p0),
    .din1(exp_res_4_V_reg_795),
    .dout(mul_ln1118_4_fu_683_p2)
);

myproject_mul_mul_14s_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_14s_18s_26_1_1_U1265(
    .din0(mul_ln1118_5_fu_690_p0),
    .din1(exp_res_5_V_reg_800),
    .dout(mul_ln1118_5_fu_690_p2)
);

myproject_mul_mul_14s_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_14s_18s_26_1_1_U1266(
    .din0(mul_ln1118_6_fu_697_p0),
    .din1(exp_res_6_V_reg_805),
    .dout(mul_ln1118_6_fu_697_p2)
);

myproject_mul_mul_14s_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_14s_18s_26_1_1_U1267(
    .din0(mul_ln1118_7_fu_704_p0),
    .din1(exp_res_7_V_reg_810),
    .dout(mul_ln1118_7_fu_704_p2)
);

myproject_mul_mul_14s_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_14s_18s_26_1_1_U1268(
    .din0(mul_ln1118_8_fu_711_p0),
    .din1(exp_res_8_V_reg_815),
    .dout(mul_ln1118_8_fu_711_p2)
);

myproject_mul_mul_14s_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_14s_18s_26_1_1_U1269(
    .din0(mul_ln1118_9_fu_718_p0),
    .din1(exp_res_9_V_reg_820),
    .dout(mul_ln1118_9_fu_718_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_0_V_reg_775 <= exp_table1_q0;
        exp_res_1_V_reg_780 <= exp_table1_q1;
        exp_res_2_V_reg_785 <= exp_table1_q2;
        exp_res_3_V_reg_790 <= exp_table1_q3;
        exp_res_4_V_reg_795 <= exp_table1_q4;
        exp_res_5_V_reg_800 <= exp_table1_q5;
        exp_res_6_V_reg_805 <= exp_table1_q6;
        exp_res_7_V_reg_810 <= exp_table1_q7;
        exp_res_8_V_reg_815 <= exp_table1_q8;
        exp_res_9_V_reg_820 <= exp_table1_q9;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce5 = 1'b1;
    end else begin
        exp_table1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce6 = 1'b1;
    end else begin
        exp_table1_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce7 = 1'b1;
    end else begin
        exp_table1_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce8 = 1'b1;
    end else begin
        exp_table1_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce9 = 1'b1;
    end else begin
        exp_table1_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_408_p0 = exp_table1_q2;

assign add_ln703_1_fu_408_p1 = exp_table1_q7;

assign add_ln703_1_fu_408_p2 = ($signed(add_ln703_1_fu_408_p0) + $signed(add_ln703_1_fu_408_p1));

assign add_ln703_2_fu_414_p1 = exp_table1_q3;

assign add_ln703_2_fu_414_p2 = ($signed(add_ln703_1_fu_408_p2) + $signed(add_ln703_2_fu_414_p1));

assign add_ln703_3_fu_420_p2 = (add_ln703_2_fu_414_p2 + add_ln703_fu_402_p2);

assign add_ln703_4_fu_426_p0 = exp_table1_q6;

assign add_ln703_4_fu_426_p1 = exp_table1_q5;

assign add_ln703_4_fu_426_p2 = ($signed(add_ln703_4_fu_426_p0) + $signed(add_ln703_4_fu_426_p1));

assign add_ln703_5_fu_432_p0 = exp_table1_q9;

assign add_ln703_5_fu_432_p1 = exp_table1_q8;

assign add_ln703_5_fu_432_p2 = ($signed(add_ln703_5_fu_432_p0) + $signed(add_ln703_5_fu_432_p1));

assign add_ln703_6_fu_438_p1 = exp_table1_q4;

assign add_ln703_6_fu_438_p2 = ($signed(add_ln703_5_fu_432_p2) + $signed(add_ln703_6_fu_438_p1));

assign add_ln703_7_fu_444_p2 = (add_ln703_6_fu_438_p2 + add_ln703_4_fu_426_p2);

assign add_ln703_fu_402_p0 = exp_table1_q0;

assign add_ln703_fu_402_p1 = exp_table1_q1;

assign add_ln703_fu_402_p2 = ($signed(add_ln703_fu_402_p0) + $signed(add_ln703_fu_402_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = {{mul_ln1118_fu_655_p2[25:10]}};

assign ap_return_1 = {{mul_ln1118_1_fu_662_p2[25:10]}};

assign ap_return_2 = {{mul_ln1118_2_fu_669_p2[25:10]}};

assign ap_return_3 = {{mul_ln1118_3_fu_676_p2[25:10]}};

assign ap_return_4 = {{mul_ln1118_4_fu_683_p2[25:10]}};

assign ap_return_5 = {{mul_ln1118_5_fu_690_p2[25:10]}};

assign ap_return_6 = {{mul_ln1118_6_fu_697_p2[25:10]}};

assign ap_return_7 = {{mul_ln1118_7_fu_704_p2[25:10]}};

assign ap_return_8 = {{mul_ln1118_8_fu_711_p2[25:10]}};

assign ap_return_9 = {{mul_ln1118_9_fu_718_p2[25:10]}};

assign exp_sum_V_fu_450_p2 = (add_ln703_7_fu_444_p2 + add_ln703_3_fu_420_p2);

assign exp_table1_address0 = zext_ln251_fu_262_p1;

assign exp_table1_address1 = zext_ln251_1_fu_277_p1;

assign exp_table1_address2 = zext_ln251_2_fu_292_p1;

assign exp_table1_address3 = zext_ln251_3_fu_307_p1;

assign exp_table1_address4 = zext_ln251_4_fu_322_p1;

assign exp_table1_address5 = zext_ln251_5_fu_337_p1;

assign exp_table1_address6 = zext_ln251_6_fu_352_p1;

assign exp_table1_address7 = zext_ln251_7_fu_367_p1;

assign exp_table1_address8 = zext_ln251_8_fu_382_p1;

assign exp_table1_address9 = zext_ln251_9_fu_397_p1;

assign invert_table2_address0 = zext_ln259_fu_466_p1;

assign mul_ln1118_1_fu_662_p0 = sext_ln1116_fu_471_p1;

assign mul_ln1118_2_fu_669_p0 = sext_ln1116_fu_471_p1;

assign mul_ln1118_3_fu_676_p0 = sext_ln1116_fu_471_p1;

assign mul_ln1118_4_fu_683_p0 = sext_ln1116_fu_471_p1;

assign mul_ln1118_5_fu_690_p0 = sext_ln1116_fu_471_p1;

assign mul_ln1118_6_fu_697_p0 = sext_ln1116_fu_471_p1;

assign mul_ln1118_7_fu_704_p0 = sext_ln1116_fu_471_p1;

assign mul_ln1118_8_fu_711_p0 = sext_ln1116_fu_471_p1;

assign mul_ln1118_9_fu_718_p0 = sext_ln1116_fu_471_p1;

assign mul_ln1118_fu_655_p0 = sext_ln1116_fu_471_p1;

assign sext_ln1116_fu_471_p1 = $signed(invert_table2_q0);

assign y_V_10_fu_456_p4 = {{exp_sum_V_fu_450_p2[17:8]}};

assign y_V_1_fu_267_p4 = {{data_1_V_read[15:6]}};

assign y_V_2_fu_282_p4 = {{data_2_V_read[15:6]}};

assign y_V_3_fu_297_p4 = {{data_3_V_read[15:6]}};

assign y_V_4_fu_312_p4 = {{data_4_V_read[15:6]}};

assign y_V_5_fu_327_p4 = {{data_5_V_read[15:6]}};

assign y_V_6_fu_342_p4 = {{data_6_V_read[15:6]}};

assign y_V_7_fu_357_p4 = {{data_7_V_read[15:6]}};

assign y_V_8_fu_372_p4 = {{data_8_V_read[15:6]}};

assign y_V_9_fu_387_p4 = {{data_9_V_read[15:6]}};

assign y_V_fu_252_p4 = {{data_0_V_read[15:6]}};

assign zext_ln251_1_fu_277_p1 = y_V_1_fu_267_p4;

assign zext_ln251_2_fu_292_p1 = y_V_2_fu_282_p4;

assign zext_ln251_3_fu_307_p1 = y_V_3_fu_297_p4;

assign zext_ln251_4_fu_322_p1 = y_V_4_fu_312_p4;

assign zext_ln251_5_fu_337_p1 = y_V_5_fu_327_p4;

assign zext_ln251_6_fu_352_p1 = y_V_6_fu_342_p4;

assign zext_ln251_7_fu_367_p1 = y_V_7_fu_357_p4;

assign zext_ln251_8_fu_382_p1 = y_V_8_fu_372_p4;

assign zext_ln251_9_fu_397_p1 = y_V_9_fu_387_p4;

assign zext_ln251_fu_262_p1 = y_V_fu_252_p4;

assign zext_ln259_fu_466_p1 = y_V_10_fu_456_p4;

endmodule //softmax_latency_ap_fixed_ap_fixed_softmax_config5_s
